{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractEdgeTypeSubscriber.js"],"names":["_EdgeType","require","_exception","AbstractEdgeTypeSubscriber","allEdgeTypes","_ref","arguments","length","undefined","_ref$priority","priority","_ref$skipOthers","skipOthers","_ref$ignore","ignore","_classCallCheck","this","tracker","tObj","toWL","typeWL","MissingOverrideError","edgeType","edge","type"],"mappings":";;;;;;;;;;AAWA,GAAAA,WAAAC,QAAA,iGACA,IAAAC,YAAAD,QAAA,2OADAE,uCAsBE,QAAAA,GAAYC,GAAwE,GAAAC,GAAAC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,MAAAG,EAAAJ,EAAxDK,SAAAA,EAAwDD,IAAAD,UAA7C,EAA6CC,EAAAE,EAAAN,EAA1CO,WAAAA,EAA0CD,IAAAH,UAA7B,KAA6BG,EAAAE,EAAAR,EAAvBS,OAAAA,EAAuBD,IAAAL,UAAd,MAAcK,CAAAE,iBAAAC,KAAAb,EAElFa,MAAKZ,aAAeA,CACpBY,MAAKN,SAAWA,CAChBM,MAAKJ,WAAaA,CAClBI,MAAKF,OAASA,qDALhBG,GAAoFD,KAAAC,QAAAA,sCA6B1EC,EAAMC,EAAMC,GAEpB,KAAM,IAAAlB,YAAAmB,qBAAyBL,KAAM,iDAdvCM,GA2BE,KAAM,IAAApB,YAAAmB,qBAAyBL,KAAM,kDAW5BE,EAAMK,EAAMC,yCAaZN,EAAMK,EAAMC,oCApBvBrB","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\n\n/**\n * Super class for all edge type subscribers.\n */\nclass AbstractEdgeTypeSubscriber {\n\n  /**\n   * @param {Object.<id, EdgeType>} allEdgeTypes - A list of all EdgeType instances that\n   *     are currently in the system. Each subscriber may use this list to build up an\n   *     index or perform mappings etc. Note that this list does not include types that are\n   *     just about to be inserted. Therefore, this list should only be used, if needed,\n   *     in the context of edge retrieval via loadEdges.\n   * @param {number} [priority} - Subscribers with a higher priority get executed earlier\n   * @param {boolean} [skipOthers] - In case of insert and delete operations: Whether or\n   *     not to skip any subsequent subscribers that also can handle the edge type\n   *     but have a lower priority assigned.\n   * @param {boolean} [ignore] - Whether or not to completely ignore this subscriber.\n   *     This flag is useful if you want to dynamically at runtime whether or not to\n   *     include the subscriber.\n   */\n  constructor(allEdgeTypes, { priority = 0, skipOthers = true, ignore = false } = {}) {\n\n    this.allEdgeTypes = allEdgeTypes;\n    this.priority = priority;\n    this.skipOthers = skipOthers;\n    this.ignore = ignore;\n\n  }\n\n  /**\n   * DI\n   * @param {Tracker} tracker\n   */\n  setTracker(tracker) {\n    this.tracker = tracker;\n  }\n\n  /**\n   * Returns all edges stored in the specified tiddler.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @param {Object<id, EdgeType>} [typeWL] - a whitelist that defines that only Tiddlers that are linked\n   *     via a type specified in the list may be included in the result. If typeWL is not passed it means\n   *     all types are included.\n   * @return {Object<Id, Edge>|null}\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    throw new MissingOverrideError(this, 'loadEdges');\n\n  }\n\n  /**\n   * Whether or not this subscriber instance can handle an edge of the given type.\n   *\n   * @interface\n   * @param {EdgeType} edgeType\n   * @return boolean\n   */\n  canHandle(edgeType) {\n\n    throw new MissingOverrideError(this, 'canHandle');\n\n  }\n\n  /**\n   * Called by the Adapter whenever a type is inserted\n   *\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Edge} edge - the edge to be deleted\n   * @param {EdgeType} type\n   */\n  insertEdge(tObj, edge, type) {\n\n    // optional\n\n  }\n\n  /**\n   * Called by the Adapter whenever a type is deleted\n   *\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Edge} edge - the edge to be deleted\n   * @param {EdgeType} type\n   */\n  deleteEdge(tObj, edge, type) {\n\n    // optional\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}