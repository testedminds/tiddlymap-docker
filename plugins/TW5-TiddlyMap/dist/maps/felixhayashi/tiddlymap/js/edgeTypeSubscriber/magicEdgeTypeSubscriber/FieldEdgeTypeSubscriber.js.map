{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FieldEdgeTypeSubscriber.js"],"names":["_utils","require","_AbstractMagicEdgeTypeSubscriber","FieldEdgeTypeSubscriber","allEdgeTypes","options","arguments","length","undefined","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_extends","priority","edgeType","namespace","tObj","fieldName","toWL","fields","edge","type","toTRef","tracker","getTiddlerById","to","_utils2","default","setField","name"],"mappings":"ijBAWA,IAAAA,QAAAC,QAAA,wFACA,IAAAC,kCAAAD,QAAA;;;;;;;;;;GAqBME,mDAKJ,SAAAA,GAAYC,GAA4B,GAAdC,GAAcC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,KAAAG,iBAAAC,KAAAP,EAAA,OAAAQ,4BAAAD,MAAAP,EAAAS,WAAAC,OAAAC,eAAAX,IAAAY,KAAAL,KAChCN,EADgCY,UAChBC,SAAU,IAAOZ,uDAM/Ba,GAER,MAAOA,GAASC,YAAc,4DAOTC,EAAMC,EAAWC,GAGtC,OAASF,EAAKG,OAAOF,yCAnBiBD,EAAAI,EAAAC,GAAA,GAAAC,GAAAhB,KAAAiB,QAAAC,eAAAJ,EAAAK,GAEvC,IAAAH,GAAA,KAAA,CA4BG,OAIFI,QAAAC,QAAMC,SAASZ,EAAMK,EAAKQ,KAAMP,EAEhC,OAAOF,wCAvBTJ,EAAAI,EAAAC,GAgCE,GAAMC,GAAShB,KAAKiB,QAAQC,eAAeJ,EAAKK,GAEhD,IAAIH,GAAU,KAAM,CAClB,OA7BFI,QAAAC,QAAAC,SAAcT,EAALE,EAAYJ,KAAd,GAmCP,OAAOG,oEAOFrB,wBAAAA","file":"../../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FieldEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/field\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport AbstractMagicEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber';\n\n/**\n * The FieldEdgeTypeSubscriber deals with connections that are stored in form of tiddler fields.\n * In this case one field can only hold one connection.\n *\n * If an EdgeType with a \"tw-field\" namespace is inserted or deleted, the type's name\n * is interpreted as field name and the connection is stored or removed in a tiddler\n * field with of that name.\n *\n * E.g. creating an edge between the tiddlers \"Betsy\" and \"Dave\" with the type\n * tw-field:husband will create a field \"husband\" inside the \"Betsy\" tiddler and set\n * \"Dave\" as value.\n\n * Note: A single field can only hold one connection.\n *\n * @see http://tiddlymap.org/#tw-field\n *\n * @inheritDoc\n * @constructor\n */\nclass FieldEdgeTypeSubscriber extends AbstractMagicEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 10, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return edgeType.namespace === 'tw-field';\n\n  }\n\n  /**\n   * @override\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    // wrap in array\n    return [ tObj.fields[fieldName] ];\n\n  }\n\n  /**\n   * Stores and maybe overrides an edge in this tiddler\n   */\n  insertEdge(tObj, edge, type) {\n\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n    if (toTRef == null) { // null or undefined\n      return;\n    }\n\n    // only use the name without the private marker or the namespace\n    utils.setField(tObj, type.name, toTRef);\n\n    return edge;\n\n  };\n\n  /**\n   * Deletes an edge in this tiddler\n   */\n  deleteEdge(tObj, edge, type) {\n\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n\n    if (toTRef == null) { // null or undefined\n      return;\n    }\n\n    // only use the name without the private marker or the namespace\n    utils.setField(tObj, type.name, '');\n\n    return edge;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { FieldEdgeTypeSubscriber };\n"],"sourceRoot":"../../../../../../../src/plugins"}