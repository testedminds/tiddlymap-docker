{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FilterEdgeTypeSubscriber.js"],"names":["_utils","require","_AbstractMagicEdgeTypeSubscriber","FilterEdgeTypeSubstriber","allEdgeTypes","options","arguments","length","undefined","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_extends","priority","edgeType","namespace","tObj","fieldName","toWL","filter","fields","toRefs","_utils2","default","getMatches","edge","type","to","name","currentFilter","toTRef","tracker","safe_toTRef","$tw","utils","stringifyList","setField"],"mappings":"kjBAaA,IAAAA,QAAAC,QAAA,wFACA,IAAAC,kCAAAD,QAAA;;;;;;;;;;GAWME,oDAKJ,SAAAA,GAAYC,GAA4B,GAAdC,GAAcC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,KAAAG,iBAAAC,KAAAP,EAAA,OAAAQ,4BAAAD,MAAAP,EAAAS,WAAAC,OAAAC,eAAAX,IAAAY,KAAAL,KAChCN,EADgCY,UAChBC,SAAU,IAAOZ,uDAM/Ba,GAER,MAAOA,GAASC,YAAc,6DAOTC,EAAMC,EAAWC,GAEtC,GAAMC,GAASH,EAAKI,OAAOH,EArB7B,IAAAI,GAAAC,QAAAC,QAAAC,WAAAL,EAAAD,EAyBE,OAAOG,wCApBRL,EAAAS,EAAAC,GAED,IAAAD,EAAAE,GAAA,CA4BI,OAIF,GAAMC,GAAOF,EAAKE,IAClB,IAAMC,GAAgBb,EAAKI,OAAOQ,IAAS,EAC3C,IAAME,GAASxB,KAAKyB,QA/BZjB,eAAUW,EAAAE,GAMpB,IAAAK,GAAAC,IAAAC,MAAAC,eAAAL,GAgCE,IAAID,EAAc1B,OAAS,EAAG,CAC5B6B,EAAc,IAAMA,EAItBV,QAAAC,QAAMa,SAASpB,EAAMY,EAAMC,EAAgBG,EA/B3C,OAAAP,oEAwCK1B,yBAAAA","file":"../../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FilterEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/filter\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport AbstractMagicEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * The FilterEdgeTypeSubstriber deals with connections that are stored inside\n * tiddler fields via a dynamic filter.\n *\n * @see http://tiddlymap.org/#tw-filter\n * @see https://github.com/felixhayashi/TW5-TiddlyMap/issues/206\n */\nclass FilterEdgeTypeSubstriber extends AbstractMagicEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 10, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return edgeType.namespace === 'tw-filter';\n\n  }\n\n  /**\n   * @override\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    const filter = tObj.fields[fieldName];\n    //noinspection UnnecessaryLocalVariableJS\n    const toRefs = utils.getMatches(filter, toWL);\n\n    return toRefs;\n\n  }\n\n  /**\n   * Stores and maybe overrides an edge in this tiddler\n   */\n  insertEdge(tObj, edge, type) {\n\n    if (!edge.to) {\n      return;\n    }\n\n    // get the name without the private marker or the namespace\n    const name = type.name;\n    const currentFilter = tObj.fields[name] || \"\";\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n    // by treating the toTRef as a list of one, we can make\n    // it safe to append to any filter.\n    // \"tiddler\" -> \"tiddler\"\n    // \"tiddler with spaces\" -> \"[[tiddler with spaces]]\"\n    var safe_toTRef = $tw.utils.stringifyList([toTRef]);\n\n    if (currentFilter.length > 0) {\n      safe_toTRef = \" \" + safe_toTRef;\n    }\n\n    // save\n    utils.setField(tObj, name, currentFilter + safe_toTRef);\n\n    return edge;\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport { FilterEdgeTypeSubstriber };\n"],"sourceRoot":"../../../../../../../src/plugins"}