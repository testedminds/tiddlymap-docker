{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/NodeType.js"],"names":["_MapElementType2","require","_utils","NodeType","id","data","_classCallCheck","this","_utils2","default","getWithoutPrefix","$tm","path","nodeTypes","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","fieldMeta","freeze","src","scope","getMatches","$tw","wiki","allTitles","getInstance","_extends","_MapElementType3","view","priority","parse","raw","isNaN","parseInt","stringify","num","isInteger","toString","getWithoutNewLines","fa-icon","tw-icon"],"mappings":"ugBAaA,IAAAA,kBAAAC,QAAA,oHACA,IAAAC,QAAAD,QAAA;;;;;;;;;;GASME,oCAtBN,SAAAA,GAAAC,EAAAC,GAAAC,gBAAAC,KAAAJ,EA0BIC,SAAaA,KAAO,SAChBI,QAAAC,QAAMC,iBAAiBN,EAAIO,IAAIC,KAAKC,UAAY,KAChD,cA5BR,IAAAC,GAAAC,2BAAAR,MAAAJ,EAAAa,WAAAC,OAAAC,eAAAf,IAAAgB,KAAAZ,KA+BUH,EAAIO,IAAIC,KAAKC,UAAWV,EAASiB,UAAWf,GAElDY,QAAOI,OAAPP,EAjCJ,OAAAA,yDA4CgBQ,GApBd,MAAAf,MAAAgB,MAAgBlB,QAAAA,QAAMmB,WAAAjB,KAAAgB,MAAAD,GAAAG,IAAAC,KAAAC,uDAatBxB,UAAAyB,YAAA,SAAAxB,GAAA,MAAAA,aAAAD,UAAAC,EAAA,GAAAD,UAAAC,GAyBFD,UAASiB,UAATS,YACKC,iBAAArB,QAAeW,WAClBW,QACAC,UACEC,MAAO,QAAAA,GAAAC,GAAA,MAAOC,OAAMD,GAAO,EAAIE,SAASF,IACxCG,UAAW,QAAAA,GAAAC,GAAA,MAAO9B,SAAAC,QAAM8B,UAAUD,GAAOA,EAAIE,WAAa,MAE5DjB,OACEc,UAAW7B,QAAAC,QAAMgC,oBAEnBC,aA1BEC,+BAgCWxC","file":"../../../../../felixhayashi/tiddlymap/js/graph/NodeType.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/NodeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport MapElementType from '$:/plugins/felixhayashi/tiddlymap/js/MapElementType';\nimport utils          from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * Used to define the type of a node.\n *\n * Note: NodeType instances are immutable (frozen).\n */\nclass NodeType extends MapElementType {\n\n  constructor(id, data) {\n\n    id = (typeof id === 'string'\n      ? utils.getWithoutPrefix(id, $tm.path.nodeTypes + '/')\n      : 'tmap:unknown');\n\n    // call the parent constructor\n    super(id, $tm.path.nodeTypes, NodeType.fieldMeta, data);\n\n    Object.freeze(this);\n\n  }\n\n  /**\n   * Get all tiddlers that inherit this type.\n   *\n   * @param {Array<TiddlerReference>} [src=$tw.wiki.allTitles()] - A list\n   *     of tiddlers that is searched for inheritors.\n   * @return {Array<TiddlerReference>} The inheritors.\n   */\n  getInheritors(src) {\n\n    return (this.scope ? utils.getMatches(this.scope, src || $tw.wiki.allTitles()) : []);\n\n  }\n\n}\n\n/**\n * @see https://github.com/babel/babel/issues/4854\n * @param {string} id - Either the edge type id (name)\n *     or a tiddler reference denoting the type or an\n *     `EdgeType` object (that is directly bounced back). If the\n *     id can be translated into a tiddler object that resides in\n *     the edge type path, then its data is retrieved automatically.\n */\nNodeType.getInstance = id => id instanceof NodeType ? id : new NodeType(id);\n\nNodeType.fieldMeta = {\n  ...MapElementType.fieldMeta,\n  'view': {},\n  'priority': {\n    parse: raw => isNaN(raw) ? 1 : parseInt(raw),\n    stringify: num => utils.isInteger(num) ? num.toString() : '1',\n  },\n  'scope': {\n    stringify: utils.getWithoutNewLines\n  },\n  'fa-icon': {},\n  'tw-icon': {},\n};\n\n/*** Exports *******************************************************/\n\nexport default NodeType;\n"],"sourceRoot":"../../../../../../src/plugins"}