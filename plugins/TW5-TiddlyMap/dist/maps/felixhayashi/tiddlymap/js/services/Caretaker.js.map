{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Caretaker.js"],"names":["_vis","require","_utils","_Fixer","_Adapter","_tracker","_EdgeTypeSubscriberRegistry","_DialogManager","_CallbackManager","_ViewAbstraction","_EdgeType","_NodeType","_vis3","_environment","env","_URL","init","window","$tm","_extends","utils","url","_URL2","default","location","href","cleanup","registerPublicClasses","updateGlobals","createMetaFile","logger","indeces","attachIndeces","services","getInitializedServices","Object","assign","loadDefaultView","config","sys","defaultView","fixer","fix","registry","setInterval","routineCheck","registerChangeListener","callbackManager","registerMousemoveListener","registerClickListener","query","prepareFullscreenStart","tracker","_tracker2","handler","$tw","modules","applyMethods","adapter","_Adapter2","edgeTypeSubscriberRegistry","_CallbackManager2","dialogManager","_DialogManager2","glNTy","parent","NodeType","_NodeType2","EdgeType","_EdgeType2","_ViewAbstraction2","attachOptions","p","_utils2","makeHashMap","merge","unflatten","wiki","getTiddlerData","ref","sysUserConf","visUserConf","field","extend","start","updateNodeTypesIndeces","updateEdgeTypesIndeces","stop","typePath","path","nodeTypes","glNTyById","eachTiddlerPlusShadows","tObj","tRef","type","getInstance","id","push","a","priority","b","edgeTypes","allETy","startsWith","et","updateIndex","attachFunctions","fn","nirvana","isTrue","debug","console","arguments","length","args","Array","prototype","slice","call","arg1","shift","hasOwnProperty","apply","timerName","time","notify","notifications","i","widget","isZombieWidget","splice","dispatchUpdates","updates","update","tRefs","getDublicates","setField","undefined","assignId","param","changedTiddler","fields","title","filter","getId","checkForClone","lastCurrentTiddler","updateLiveViewTrigger","changedTiddlers","getField","printChanges","loopCount","c","deleted","getTiddler","evt","mouse","addEventListener","tempPopups","popupStates","getTiddlersByPrefix","getText","hasClass","target","getAncestorWithClass","setText","refresh","isDraft","isHandled","handleTiddlerChange","rebuilders","options","_defineProperty","_rebuilders","isSystemTiddler","text","dispatchEvent","getIdByTiddler","tRefWithId","getTiddlerWithField","deleteNode","deleteByPrefix","defaultViewHolder","_env$ref","mainEditor","setSidebarTab","exists","view","getLabel","tiddlerExists","sysMeta","plugin","pluginRoot","setTiddlerData","version","dataStructureState","showWelcomeMessage","name","platforms","after","synchronous"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Caretaker.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/caretaker\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport visConfig                  from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\nimport utils                      from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Fixer                      from '$:/plugins/felixhayashi/tiddlymap/js/Fixer';\nimport Adapter                    from '$:/plugins/felixhayashi/tiddlymap/js/Adapter';\nimport Tracker                    from '$:/plugins/felixhayashi/tiddlymap/js/services/tracker';\nimport EdgeTypeSubscriberRegistry from '$:/plugins/felixhayashi/tiddlymap/js/EdgeTypeSubscriberRegistry';\nimport DialogManager              from '$:/plugins/felixhayashi/tiddlymap/js/DialogManager';\nimport CallbackManager            from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction            from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType                   from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType                   from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport vis                        from '$:/plugins/felixhayashi/vis/vis.js';\nimport * as env                   from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\nimport URL                        from '$:/plugins/felixhayashi/tiddlymap/js/URL';\n\n/*** Code **********************************************************/\n\n/**\n * This module is responsible for registering a global namespace\n * under $tw and loading (and refreshing) the configuration and services.\n *\n * Attention: Careful with the order of the function calls in this\n * functions body!\n *\n */\nconst init = () => {\n\n  window.$tm = { ...env, utils, url: new URL(window.location.href) };\n\n  // cleanup previous session\n  cleanup();\n\n  registerPublicClasses($tm);\n\n  // build and integrate global options\n  updateGlobals($tm);\n\n  // register meta file (if not done yet)\n  createMetaFile($tm.logger);\n\n  // create indeces\n  const indeces = attachIndeces($tm);\n\n  // create services\n  const services = getInitializedServices(indeces);\n  Object.assign($tm, services);\n\n  // load defaults\n  loadDefaultView($tm.config.sys.defaultView);\n\n  // Run the fixer to update older wikis\n  services.fixer.fix();\n\n  // all graphs need to register here. @see routineWalk()\n  $tm.registry = [];\n  setInterval(routineCheck, 5000);\n\n  // AT THE VERY END: register change listener with the callback manager\n  registerChangeListener($tm.callbackManager);\n\n  // register DOM listeners\n  registerMousemoveListener();\n  registerClickListener();\n\n  // check for fullscreen directives\n  if ($tm.url.query['tmap-enlarged']) {\n    prepareFullscreenStart($tm.url);\n  }\n\n  // issue notification\n  $tm.logger('warn', 'TiddlyMap\\'s caretaker successfully started');\n\n};\n\n/**\n * Injects dependencies and registers services\n *\n * @param indeces\n * @return Object\n */\nconst getInitializedServices = indeces => {\n\n  const tracker = new Tracker(fixer);\n\n  // inject modules\n  const handler = $tw.modules.applyMethods('tmap.edgetypehandler');\n  const edgeTypeSubscriberRegistry = new EdgeTypeSubscriberRegistry(\n    handler,\n    indeces.allETy,\n    tracker\n  );\n\n  // attach the adapter object to the tiddlymap namespace\n  const adapter = new Adapter(\n    tracker,\n    edgeTypeSubscriberRegistry\n  );\n\n  const callbackManager = new CallbackManager();\n  const dialogManager = new DialogManager(callbackManager);\n\n  const fixer = new Fixer(adapter, $tm.logger, indeces.glNTy)\n\n  return {\n    edgeTypeSubscriberRegistry,\n    tracker,\n    adapter,\n    callbackManager,\n    dialogManager,\n    fixer,\n  };\n\n};\n\n/**\n * make classes available for console users\n */\nconst registerPublicClasses = (parent) => {\n  parent.keycharm = vis.keycharm;\n  parent.NodeType = NodeType;\n  parent.EdgeType = EdgeType;\n  parent.ViewAbstraction = ViewAbstraction;\n};\n\n/**\n * This function will append the global options to the tree. In case\n * this function is called again, only the option leafs are rebuild\n * so a process may safely store a reference to a branch of the option\n * tree as the reference doesn't change.\n *\n * ATTENTION: For the path options, no trailing or double slashes!\n * This is NOT unix where paths are normalized (// is not rewritten to /).\n *\n * @see\n *   - [TW5] Is there a designated place for TW plugins to store stuff in the dom?\n *     https://groups.google.com/forum/#!topic/tiddlywikidev/MZZ37XiVcvY\n * @param {object} parent The root where to insert the options into\n */\nvar attachOptions = function(parent) {\n\n  var p = parent;\n\n  // default configurations mixed with user config\n  if (!p.config) p.config = utils.makeHashMap();\n\n  // Never modify the imported config objects; instead, merge them\n  // into a new object\n\n  // attention! it is a tw-data-tiddler!\n  p.config.sys = utils.merge(\n    p.config.sys,\n    utils.unflatten($tw.wiki.getTiddlerData(env.ref.sysUserConf))\n  );\n\n  // CAREFUL: Never merge directly into the default vis config object\n  p.config.vis = utils.merge(\n    {}, visConfig, utils.parseFieldData(env.ref.visUserConf)\n  );\n\n  // a shortcut for fields property\n  if (!p.field) p.field = utils.makeHashMap();\n  $tw.utils.extend(p.field, p.config.sys.field);\n\n};\n\n/**\n * This function will cache/index some tiddler properties as javascript\n * objects for faster access.\n */\nconst attachIndeces = (parent) => {\n\n  $tm.start('Attaching Indeces');\n\n  parent.indeces = parent.indeces || {};\n\n  updateNodeTypesIndeces(parent.indeces);\n  updateEdgeTypesIndeces(parent.indeces);\n\n  $tm.stop('Attaching Indeces');\n\n  return parent.indeces;\n\n};\n\n/**\n * For faster access to node-type styles, we store all node-type\n * objects as indeces in a table.\n *\n * Types without a filter are not indexed since they are either\n * special types that TiddlyMap manually assignes (e.g. tmap:neighbour,\n * or tmap:selected).\n *\n * Indeces added to the indeces chain:\n * 1. glNTy – all global node types\n *\n * @param {Object} [parent] - The global indeces object indeces.\n *     If not stated, $tm.indeces is used.\n * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n *     use as basis for this index. If not stated, all tiddlers in\n *     the wiki are used.\n */\nvar updateNodeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.nodeTypes;\n  var glNTy = parent.glNTy = [];\n  var glNTyById = parent.glNTyById = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n    if (utils.startsWith(tRef, typePath)) {\n      var type = NodeType.getInstance(tRef);\n      glNTyById[type.id] = type;\n      glNTy.push(type);\n    }\n  });\n\n  glNTy.sort(function(a, b) {\n    return a.priority - b.priority;\n  });\n\n};\n\nvar updateEdgeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.edgeTypes;\n  var allETy = parent.allETy = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n\n    if (utils.startsWith(tRef, typePath)) {\n\n      var et = EdgeType.getInstance(tRef);\n      allETy[et.id] = et;\n\n    }\n\n  });\n\n  if ($tm.edgeTypeSubscriberRegistry) {\n    $tm.edgeTypeSubscriberRegistry.updateIndex(allETy);\n  }\n\n};\n\n/**\n * This function attaches all the top level functions to the\n * tiddlymap namespace.\n *\n * This will add the\n * 1. global logger method,\n * 2. the notify method\n * 3. the stopwatch methods `start` and `stop`.\n *\n * @param {Hashmap} parent - The parent object to attach the options to.\n */\nvar attachFunctions = function(parent) {\n\n  var fn = parent;\n  var nirvana = function() { /* /dev/null */ };\n\n  if (utils.isTrue($tm.config.sys.debug, false) && console) {\n\n    /**\n     * A logging mechanism that uses the first argument as type and\n     * passes all consequent arguments as console arguments. The\n     * reason for this functions existence is to be able to switch\n     * off the logging without redirecting every single console function\n     * such as log, debug, warn etc. Plus, we have more control over\n     * the logging.\n     *\n     * @see http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n     * @see http://stackoverflow.com/questions/9521921/why-does-console-log-apply-throw-an-illegal-invocation-error\n     *\n     * @param {string} type - The type of the message (debug, info, warning…)\n     *     which is exactly the same as in `console[type]`.\n     * @param {...*} message - An infinite number of arguments to be printed\n     *     (just like console).\n     */\n    fn.logger = function(/* type, [messages,] messages */) {\n      if (arguments.length < 2) return;\n      var args = Array.prototype.slice.call(arguments);\n      var arg1 = args.shift(args);\n      var type = (console.hasOwnProperty(arg1) ? arg1 : 'debug');\n      console[type].apply(console, args);\n    };\n\n    fn.start = function(timerName) {\n      console.time('[timer] ' + timerName);\n    };\n\n    fn.stop = function(timerName) {\n      console.timeEnd('[timer] ' + timerName);\n    };\n\n  } else {\n\n    fn.logger = fn.start = fn.stop = nirvana;\n\n  }\n\n  fn.notify = (utils.isTrue($tm.config.sys.notifications) ? utils.notify : nirvana);\n\n};\n\n/**\n * This periodic check is needed to trigger a cleanup if a graph is\n * removed since a graph itself cannot react to its destruction.\n * This includes removing listeners that were not attached to the\n * local container or calling the vis destructor.\n *\n * @todo Specify which functions are required for widgets that register\n * themselves in the registry.\n */\nvar routineCheck = function() {\n\n  for (var i = $tm.registry.length; i--;) {\n    var widget = $tm.registry[i];\n\n    if (!widget.destruct || !widget.isZombieWidget) return; // no duck!\n\n    if (widget.isZombieWidget()) { // removed!\n      $tm.logger('warn', 'a widget will be removed');\n      $tm.registry.splice(i, 1);\n      widget.destruct();\n    }\n  }\n\n};\n\n/**\n * Every widget that has registered itself in the registry\n * will receive the `updates` object. The `updates` object is a more\n * advanced\n *\n * @param {Updates} updates\n */\nconst dispatchUpdates = updates => {\n\n  const registry = $tm.registry;\n  for (let i = registry.length; i--;) {\n\n    const widget = registry[i];\n\n    if (widget.update && (widget.isZombieWidget && !widget.isZombieWidget())) {\n      widget.update(updates);\n    }\n  }\n\n};\n\n/**\n * We need to do this check as TiddlyWiki does not allow us to hook into the\n * clone process to find out whether a node was cloned.\n *\n * @param tObj\n */\nconst checkForClone = tObj => {\n\n  const tRefs = utils.getDublicates(tObj);\n\n  if (!tRefs.length) {\n    return;\n  }\n\n  // remove any defined edges\n  utils.setField(tObj, 'tmap.edges', undefined);\n\n  // force override id\n  $tm.tracker.assignId(tObj, true);\n\n  // inform the user about what we did\n  $tm.dialogManager.open('dublicateIdInfo', {\n    param: {\n      changedTiddler: tObj.fields.title,\n      filter : utils.joinAndWrap(tRefs, '[[', ']]'),\n      id: utils.getId(tObj),\n    }\n  });\n\n\n};\n\n/**\n * Builds and registers globals and the functions that depend on them.\n */\nconst updateGlobals = parent => {\n\n  attachOptions($tm);\n  attachFunctions($tm);\n\n  // attention: logger() cannot be called before functions are rebuild\n  $tm.logger('warn', 'Rebuilt globals');\n\n};\n\nvar lastCurrentTiddler = null;\nvar updateLiveViewTrigger = function(changedTiddlers) {\n\n  if (changedTiddlers['$:/HistoryList']) {\n    var tRef = utils.getField('$:/HistoryList', 'current-tiddler');\n  } else if (changedTiddlers['$:/temp/focussedTiddler']) {\n    var tRef = utils.getField('$:/temp/focussedTiddler', 'text');\n  }\n\n  if (tRef != null && lastCurrentTiddler !== tRef) {\n    lastCurrentTiddler = tRef;\n    utils.setField('$:/temp/tmap/currentTiddler', 'text', tRef);\n  }\n\n};\n\n/**\n * Only for debugging\n */\nvar printChanges = function(changedTiddlers, loopCount) {\n\n  if (!utils.isTrue($tm.config.sys.debug, false)) return;\n\n  $tm.logger('warn', '=== Refresh ' + loopCount + ' ===');\n\n  for (var tRef in changedTiddlers) {\n\n    var c = changedTiddlers[tRef].deleted ? '[Deleted]' : '[Modified]';\n\n    $tm.logger('warn', c, tRef, $tw.wiki.getTiddler(tRef));\n  }\n\n};\n\n/**\n * Saves the last mousemove event under $tm.mouse\n */\nvar registerMousemoveListener = function() {\n\n  $tm.mouse = {};\n\n  var fn = function(evt) { $tm.mouse = evt; };\n  window.addEventListener('mousemove', fn, false);\n\n};\n\n/**\n * @TODO: suggest this to Jeremy for TW popup handling\n */\nvar registerClickListener = function() {\n\n  var tempPopups = $tm.path.tempPopups;\n  window.addEventListener('click', function(evt) {\n\n    var popupStates = utils.getTiddlersByPrefix(tempPopups);\n\n    for (var i = popupStates.length; i--;) {\n      if (utils.getText(popupStates[i])) break;\n    }\n\n    if (i === -1) return;\n\n    if (!$tw.utils.hasClass(evt.target, 'tc-drop-down')\n       && !utils.getAncestorWithClass(evt.target, 'tc-drop-down')) {\n    // = clicked on an element that isn't a dropdown or inside one\n      for (var i = popupStates.length; i--;) {\n        utils.setText(popupStates[i], '');\n      }\n    }\n\n  }, false);\n};\n\n/**\n * Registers a change listener that will dispatch\n * @param callbackManager\n */\nconst registerChangeListener = callbackManager => {\n\n  let loopCount = 0;\n\n  $tw.wiki.addEventListener('change', changedTiddlers => {\n\n    $tm.start('Caretaker handling changes');\n\n    printChanges(changedTiddlers, loopCount++);\n    callbackManager.refresh(changedTiddlers);\n\n    const updates = { changedTiddlers: {} };\n\n    for (let tRef in changedTiddlers) {\n\n      const tObj = utils.getTiddler(tRef);\n\n      if (tObj && tObj.isDraft()) {\n        continue;\n      }\n\n      const isHandled = handleTiddlerChange(tRef, tObj, updates);\n\n      if (isHandled) {\n        updates.changedTiddlers[tRef] = changedTiddlers[tRef];\n      }\n    }\n\n    dispatchUpdates(updates);\n\n    // NOTE: changes will affect the next refresh cycle\n    updateLiveViewTrigger(changedTiddlers);\n\n    $tm.stop('Caretaker handling changes');\n\n  });\n\n};\n\n/**\n * Mapping of paths and callbacks that should be invoked if tiddlers\n * within theses paths change.\n */\nconst rebuilders = {\n  [env.path.options]: updateGlobals,\n  [env.path.nodeTypes]: updateNodeTypesIndeces,\n  [env.path.edgeTypes]: updateEdgeTypesIndeces,\n};\n\n/**\n * This function will deal with tiddler changes and will log changes\n * to the provided `updates` object.\n *\n * @param {TiddlerReference} tRef\n * @param {$tw.Tiddler} tObj\n * @param {Updates} updates\n */\nconst handleTiddlerChange = (tRef, tObj, updates) => {\n\n  if ($tw.wiki.isSystemTiddler(tRef)) {\n\n    for (let path in rebuilders) {\n      if (utils.startsWith(tRef, path) && !updates[path]) {\n        $tm.logger('warn', '[System change]', path);\n        rebuilders[path]();\n        updates[path] = true;\n      }\n    }\n\n  } else if (tObj) { // created or modified\n\n    if (tObj.fields.text === undefined) { // sic; '' is ok\n      // to make sure that the tiddler's body is fully loaded\n      // we postpone the handling of the tiddler\n      // see https://github.com/felixhayashi/TW5-TiddlyMap/issues/222#issuecomment-268978764\n      $tw.wiki.dispatchEvent('lazyLoad', tRef);\n\n      return false;\n    }\n\n    checkForClone(tObj);\n\n    // call assignId IN ANY CASE to make sure the index\n    // stays intact, also after a renaming operation\n    $tm.tracker.assignId(tObj);\n\n  } else { // deleted or renamed\n\n    const id = $tm.tracker.getIdByTiddler(tRef);\n\n    if (!id) { // ignore tiddler without id\n      return false;\n    }\n\n    const tRefWithId = utils.getTiddlerWithField('tmap.id', id);\n\n    if (tRefWithId) { // only renamed\n\n      $tm.logger('warn', '[Renamed]', tRef, 'into', tRefWithId);\n\n    } else { // removed\n\n      // remove node; any edges pointing in/out; update indeces\n      // CAREFUL with recursion here!\n      $tm.adapter.deleteNode(id);\n\n    }\n  }\n\n  return true;\n\n};\n\n/**\n * Remove temp files from previous session.\n */\nconst cleanup = () => {\n\n  utils.deleteByPrefix('$:/temp/felixhayashi');\n  utils.deleteByPrefix('$:/temp/tiddlymap');\n  utils.deleteByPrefix('$:/temp/tmap');\n\n};\n\n/**\n * Register the view that should be displayed at startup.\n */\nconst loadDefaultView = defaultView => {\n\n  if (defaultView) {\n    utils.setText(env.ref.defaultViewHolder, $tm.config.sys.defaultView);\n  }\n\n};\n\n/**\n * Init the wiki so we can start the main editor with the specified\n * view in fullscreen mode.\n *\n * @param {ViewAbstraction|string} view\n */\nconst prepareFullscreenStart = view => {\n\n  const { mainEditor, defaultViewHolder } = env.ref;\n\n  utils.setSidebarTab(mainEditor);\n\n  if (ViewAbstraction.exists(view)) {\n    view = new ViewAbstraction(view);\n    utils.setField(defaultViewHolder, 'text', view.getLabel());\n  }\n\n};\n\n/**\n * The meta file keeps track of installation data.\n */\nconst createMetaFile = (logger) => {\n\n  if (utils.tiddlerExists(env.ref.sysMeta)) {\n    return;\n  }\n\n  logger('warn', 'Creating meta file');\n\n  const plugin = $tw.wiki.getTiddler(env.path.pluginRoot);\n\n  $tw.wiki.setTiddlerData(env.ref.sysMeta, {\n    // the version originally installed\n    originalVersion: plugin.fields.version,\n    // the data structure in use corresponds to version x\n    // if the structure is obsolete, it will be automatically\n    // fixed by the fixer module.\n    dataStructureState: '0.6.9',\n    // whether or not to display a welcome message\n    showWelcomeMessage: true\n  });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.caretaker';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'startup' ];\nexport const before = [ 'rootwidget' ];\nexport const synchronous = true;\nexport const startup = init;\n"],"sourceRoot":"../../../../../../src/plugins"}