{"version":3,"sources":["felixhayashi/tiddlymap/js/services/DialogManager.js"],"names":["_utils","require","_CallbackManager","DialogManager","callbackManager","context","_classCallCheck","this","templateId","param","arguments","length","undefined","callback","_utils2","default","isTrue","$tm","config","sys","suppressedDialogs","logger","bind","dialogTRef","path","tempRoot","genUUID","skeleton","getTiddler","dialogs","dialog","title","buttons","fields","classes","result","temp","template","currentTiddler","text","$tw","Tiddler","output","flatten","preselects","footer","footers","addTiddler","fn","tRef","getElement","click","triggerTObj","merge","isConfirmed","outputTObj","wiki","notify","deleteByPrefix","add","dialogTiddler","rootWidget","dispatchEvent","type","paramObject","name","keys","keycharm","container","getFirstElementByClassName","re","triggers","document","getElementsByClassName","i","classNames","className","split","j","matches","match","buttonName","key","buttonElement"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/DialogManager.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/DialogManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport CallbackManager from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\n\n/**\n * The DialogManager is responsible for preparing, displaying and\n * finalizing all the dialogs.\n */\nclass DialogManager {\n\n  /**\n   * @param {CallbackManager} callbackManager - A callback manager that\n   *     is informed about changed tiddlers and keeps track of the\n   *     various tiddlers produced during the dialog process.\n   * @param {Object} [context] - An optional *this*-reference to bind the\n   *     callback of each called dialog to. Otherwise, the callback of\n   *     each dialog has to be bound manually to the callback if required.\n   */\n  constructor(callbackManager, context) {\n\n    // create callback registry\n    this.callbackManager = callbackManager;\n    this.context = context;\n\n  }\n\n  /**\n   * This function opens a dialog based on a skeleton and some fields and eventually\n   * calls a callback once the dialog is closed. The callback contains an indicator\n   * whether the dialog subject was confirmed or the operation cancelled. In any\n   * case the output tiddler is passed to the callback. Each dialog may write its\n   * changes to this tiddler in order to store the dialog result and make it available\n   * to the callback.\n   *\n   * How does it work?\n   *\n   * The output of the dialog process is stored in a temporary tiddler that is only known\n   * to the current instance of the dialog. This way it is ensured that only the dialog process\n   * that created the temporary tiddler will retrieve the result. Now we are able to\n   * provide unambigous and unique correspondance to dialog callbacks.\n\n   * Any dialog output is stored in a unique output-tiddler. Once there is a result,\n   * a new result tiddler is created with indicators how to interpret the output.\n   * The result tiddler can be understood as exit code that is independent of the output.\n   * It is the result tiddler that triggers the dialog callback that was registered before.\n   * the output is then read immediately from the output-tiddler.\n   *\n   * @param {string} templateId - The dialog id which is the basename of\n   *     the template title.\n   * @param {Hashmap} [param] - All properties (except those with special meanings)\n   *     of param will be accessible as variables in the modal\n   * @param {string} [param.subtitle] -\n   * @param {string} [param.cancelButtonLabel] - The label of the cancel button.\n   * @param {string} [param.confirmButtonLabel] - The label of the confirm button.\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed, outputTObj). `outputTObj` contains data\n   *     produced by the dialog (can be undefined even if confirmed!).\n   *     Be careful: the tiddler that outputTObj represents is deleted immediately.\n   * @return {$tw.Tiddler} The dialog tddler object with all its fields.\n   */\n  open(templateId, param = {}, callback) {\n\n    if (utils.isTrue($tm.config.sys.suppressedDialogs[templateId], false)) {\n      $tm.logger('warning', 'Suppressed dialog', templateId);\n      return;\n    }\n\n    $tm.logger('debug', 'Dialog param object', param);\n\n    if (typeof callback === 'function' && this.context) {\n      callback = callback.bind(this.context);\n    }\n\n    // create a temporary tiddler reference for the dialog\n    const dialogTRef = `${$tm.path.tempRoot}/dialog-${utils.genUUID()}`;\n\n    // get the dialog template\n    const skeleton = utils.getTiddler(`${$tm.path.dialogs}/${templateId}`);\n\n    // fields used to handle the dialog process\n    let dialog = {\n      title: dialogTRef,\n      buttons: skeleton.fields['buttons'] || 'ok_cancel',\n      classes: 'tmap-modal-content ' + skeleton.fields['classes'],\n      output: dialogTRef + '/output',\n      result: dialogTRef + '/result',\n      temp: dialogTRef + '/temp',\n      template: skeleton.fields.title,\n      templateId: templateId,\n      currentTiddler: dialogTRef + '/output',\n      text: utils.getText($tm.path.dialogs)\n    };\n\n    if (param.dialog) {\n\n      if (param.dialog.preselects) {\n\n        // register preselects\n        $tw.wiki.addTiddler(new $tw.Tiddler(\n          {title: dialog.output},\n          utils.flatten(param.dialog.preselects)\n        ));\n\n        // remove preselects from param object\n        delete param.dialog.preselects;\n\n      }\n\n      // extend the dialog object with parameters provided by the user\n      utils.merge(dialog, param.dialog);\n\n    }\n\n    // force the footer to be set to the wrapper\n    // the footer wrapper will determine the footer from the\n    // buttons field/variable\n    dialog.footer = utils.getText($tm.path.footers);\n\n    // flatten dialog and param object\n    dialog = utils.flatten(dialog);\n    param = utils.flatten(param);\n\n    const fn = tRef => {\n\n      DialogManager.getElement('hidden-close-button').click();\n\n      const triggerTObj = $tw.wiki.getTiddler(tRef);\n      const isConfirmed = triggerTObj.fields.text;\n\n      let outputTObj = null;\n      if (isConfirmed) {\n        outputTObj = $tw.wiki.getTiddler(dialog.output);\n      } else {\n        $tm.notify('operation cancelled');\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed, outputTObj);\n      }\n\n      // close and remove all tiddlers used by the dialog\n      utils.deleteByPrefix(dialogTRef);\n\n    };\n\n    // add trigger\n    this.callbackManager.add(dialog.result, fn, true);\n\n\n    // create dialog\n    const dialogTiddler = new $tw.Tiddler(skeleton, param, dialog);\n    $tw.wiki.addTiddler(dialogTiddler);\n\n    $tm.logger('debug', 'Opening dialog', dialogTiddler);\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tm-modal',\n      param: dialogTiddler.fields.title,\n      paramObject: dialogTiddler.fields\n    });\n\n    DialogManager.addKeyBindings();\n\n    return dialogTiddler;\n\n  };\n\n  static getElement(name) {\n\n    return utils.getFirstElementByClassName('tmap-' + name);\n\n  }\n\n  /**\n   * This method will search for form elements that have the class\n   * `tmap-trigger-field` set, which means that TiddlyMap shall\n   * perform a button press when a key combo occurs while the field\n   * has focus. To know which button to press on what key event,\n   * it looks for classes of the form: tmap-triggers-BUTTONNAME-on-KEYCOMBO.\n   */\n  static addKeyBindings() {\n\n    const keys = $tm.keycharm({\n      container: utils.getFirstElementByClassName('tc-modal')\n    });\n\n    const re = /tmap-triggers-(.+?)-on-(.+?)(?:\\s|$)/;\n    const triggers = document.getElementsByClassName('tmap-trigger-field');\n\n    for (let i = triggers.length; i--;) {\n      const classNames = triggers[i].className.split(' ');\n      for (let j = classNames.length; j--;) {\n        const matches = classNames[j].match(re);\n        if (!matches) { // don't care\n          continue;\n        }\n        const buttonName = matches[1];\n        const key = matches[2];\n        const buttonElement = DialogManager.getElement(buttonName);\n        if (!buttonElement) continue;\n        keys.bind(key, function () {\n          this.click();\n        }.bind(buttonElement));\n      }\n    }\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default DialogManager;\n"],"sourceRoot":"../../../../../../src/plugins"}