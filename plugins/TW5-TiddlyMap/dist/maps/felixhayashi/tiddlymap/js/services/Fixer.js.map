{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Fixer.js"],"names":["_utils","require","_ViewAbstraction","_EdgeType","_NodeType","_environment","env","Fixer","adapter","logger","glNTy","_classCallCheck","this","wiki","$tw","path","view","matches","_utils2","default","getTiddlersByPrefix","i","length","type","getBasename","_EdgeType2","getInstance","exists","save","edges","j","id","deleteTiddler","upgrade","isLeftVersionGreater","toVersion","curVersion","msg","ref","sysMeta","meta","getTiddlerData","executeUpgrade","dataStructureState","originalVersion","userConf","nodeIdField","getEntry","moveFieldValues","_this","moveEdges","filter","selector","allViews","getMatches","viewRefs","_ViewAbstraction2","getRoot","liveView","setNodeFilter","setConfig","refresh-trigger","refresh-triggers","utils","stringifyList","confRef","visUserConf","unflatten","_typeof","groups","_NodeType2","setStyle","setTiddlerData","fixId","liveTab","getTiddler","hasTag","setField","views","eTyFilter","getEdgeTypeFilter","confKey","f","edgeTypePath","edgeTypes","replaceAll","setEdgeTypeFilter"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Fixer.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/Fixer\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport ViewAbstraction from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType        from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType        from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport * as env        from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\nclass Fixer {\n\n  /**\n   * @param {Adapter} adapter\n   * @param {Object} logger\n   * @param {Object} glNTy\n   */\n  constructor(adapter, logger, glNTy) {\n\n    this.adapter = adapter;\n    this.logger = logger;\n    this.wiki = $tw.wiki;\n    this.glNTy = glNTy;\n\n  }\n\n  moveEdges(path, view) {\n\n    const matches = utils.getTiddlersByPrefix(path);\n    for (let i = 0; i < matches.length; i++) {\n\n      // create edge type\n      let type = utils.getBasename(matches[i]);\n\n      if (type === '__noname__') {\n        type = 'tmap:unknown';\n      }\n\n      type = EdgeType.getInstance(type);\n\n      if (!type.exists()) {\n        type.save();\n      }\n\n      // move edges\n      const edges = this.wiki.getTiddlerData(matches[i]);\n      for (let j = 0; j < edges.length; j++) {\n        // prefix formerly private edges with view name as namespace\n        edges[j].type = (view ? view + ':' : '') + type.id;\n        this.adapter.insertEdge(edges[j]);\n      }\n\n      // finally remove the store\n      this.wiki.deleteTiddler(matches[i]);\n\n    }\n\n  }\n\n  executeUpgrade(toVersion, curVersion, upgrade) {\n\n    if (!utils.isLeftVersionGreater(toVersion, curVersion)) {\n      // = current data structure version is newer than version we want to upgrade to.\n      return;\n    }\n\n    // issue debug message\n    this.logger('debug', `Upgrading data structure to ${toVersion}`);\n    // execute fix\n    const msg = upgrade();\n    // update meta\n    utils.setEntry(env.ref.sysMeta, 'dataStructureState', toVersion);\n\n    return msg;\n\n  };\n\n  /**\n   * Special fix that is not invoked along with the other fixes but\n   * when creating the index (see caretaker code).\n   *\n   * Changes:\n   * 1. The node id field is moved to tmap.id if **original version**\n   *    is below v0.9.2.\n   */\n  fixId() {\n\n    const meta = this.wiki.getTiddlerData(env.ref.sysMeta, {});\n\n    this.executeUpgrade('0.9.2', meta.dataStructureState, () => {\n\n      if (utils.isLeftVersionGreater('0.9.2', meta.originalVersion)) {\n        // path of the user conf at least in 0.9.2\n        const userConf = '$:/plugins/felixhayashi/tiddlymap/config/sys/user';\n        const nodeIdField = utils.getEntry(userConf, 'field.nodeId', 'tmap.id');\n        utils.moveFieldValues(nodeIdField, 'tmap.id', true, false);\n      }\n    });\n\n  };\n\n  fix() {\n\n    const meta = this.wiki.getTiddlerData(env.ref.sysMeta, {});\n\n    this.logger('debug', 'Fixer is started');\n    this.logger('debug', 'Data-structure currently in use: ', meta.dataStructureState);\n\n    /**\n     * Changes:\n     * 1. Edges are stored in tiddlers instead of type based edge stores\n     * 2. No more private views\n     */\n    this.executeUpgrade('0.7.0', meta.dataStructureState, () => {\n\n      // move edges that were formerly \"global\"\n      this.moveEdges('$:/plugins/felixhayashi/tiddlymap/graph/edges', null);\n\n      // move edges that were formerly bound to view (\"private\")\n      const filter = env.selector.allViews;\n      const viewRefs = utils.getMatches(filter);\n      for (let i = 0; i < viewRefs.length; i++) {\n        const view = new ViewAbstraction(viewRefs[i]);\n        this.moveEdges(`${view.getRoot()}/graph/edges`, view);\n      }\n\n    });\n\n    /**\n     * Changes:\n     * 1. Changes to the live view filter and refresh trigger field\n     */\n    this.executeUpgrade('0.7.32', meta.dataStructureState, () => {\n\n      if (!ViewAbstraction.exists('Live View')) {\n\n        return;\n      }\n\n      const liveView = new ViewAbstraction('Live View');\n\n      // Only listen to the current tiddler of the history list\n      liveView.setNodeFilter('[field:title{$:/temp/tmap/currentTiddler}]', true);\n\n      liveView.setConfig({\n        'refresh-trigger': null, // delete the field (renamed)\n        'refresh-triggers': $tw.utils.stringifyList([ '$:/temp/tmap/currentTiddler' ]),\n      });\n\n    });\n\n    /**\n     * Changes:\n     * 1. Group styles for matches and neighbours are now modulized\n     *    and stored as node-types.\n     * 2. vis user configuration is restored unflattened!\n     *    The user only interacts through the GUI.\n     * 3. If the node id field was \"id\" it is moved to tmap.id\n     */\n    this.executeUpgrade('0.9.0', meta.dataStructureState, () => {\n\n      const confRef = env.ref.visUserConf;\n      const userConf = utils.unflatten(this.wiki.getTiddlerData(confRef, {}));\n\n      if (typeof userConf.groups === 'object') {\n\n        const type = NodeType.getInstance('tmap:neighbour');\n        type.setStyle(userConf.groups[ 'neighbours' ]);\n        type.save();\n\n        delete userConf.groups;\n        this.wiki.setTiddlerData(confRef, userConf);\n\n      }\n\n    });\n\n    /**\n     * Changes:\n     * 1. The node id field is moved to tmap.id if **original version**\n     *    is below v0.9.2.\n     */\n    this.fixId();\n\n\n    /**\n     * This will ensure that all node types have a prioritization field\n     * set.\n     */\n    this.executeUpgrade('0.9.16', meta.dataStructureState, () => {\n\n      for (let i = this.glNTy.length; i--;) {\n        this.glNTy[i].save(null, true);\n      }\n\n    });\n\n    /**\n     * Fixes the live tab\n     */\n    this.executeUpgrade('0.10.3', meta.dataStructureState, function () {\n\n      const liveTab = env.ref.liveTab;\n      if (utils.getTiddler(liveTab).hasTag('$:/tags/SideBar')) {\n        this.wiki.deleteTiddler(liveTab);\n        utils.setField(liveTab, 'tags', '$:/tags/SideBar');\n      }\n\n    });\n\n    /**\n     * 1) Fixes the edge type filter. Before, an empty filter was\n     * treated as default filter, i.e. no links and tags shown.\n     * Now an empty filter means that we show all edge types.\n     *\n     * 2) Adds prefix to hide private edges per default\n     *\n     * 3) Corrects view-namespaces (formerly stored with colon).\n     *\n     */\n    this.executeUpgrade('0.11.0', meta.dataStructureState, function () {\n\n      const views = utils.getMatches(env.selector.allViews);\n\n      for (let i = views.length; i--;) {\n\n        const view = new ViewAbstraction(views[i]);\n        let eTyFilter = view.getEdgeTypeFilter('raw');\n        const confKey = 'edge_type_namespace';\n        view.setConfig(confKey, view.getConfig(confKey));\n\n        let f = env.filter.defaultEdgeTypeFilter;\n\n        if (eTyFilter) {\n\n          // remove any occurences of the egde type path prefix\n          const edgeTypePath = env.path.edgeTypes;\n          eTyFilter = utils.replaceAll(eTyFilter, '', [\n            edgeTypePath,\n            edgeTypePath + '/',\n            '[prefix[' + edgeTypePath + ']]',\n            '[prefix[' + edgeTypePath + '/]]',\n            [ '[suffix[tw-body:link]]', '[[tw-body:link]]' ],\n            [ '[suffix[tw-list:tags]]', '[[tw-list:tags]]' ],\n            [ '[suffix[tw-list:list]]', '[[tw-body:list]]' ],\n            [ '[suffix[tmap:unknown]]', '[[tmap:unknown]]' ],\n            [ '[suffix[unknown]]', '[[tmap:unknown]]' ],\n          ]);\n\n          f = '-[prefix[_]] ' + eTyFilter;\n\n        }\n\n        view.setEdgeTypeFilter(f);\n      }\n\n    });\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport default Fixer;\n\n"],"sourceRoot":"../../../../../../src/plugins"}