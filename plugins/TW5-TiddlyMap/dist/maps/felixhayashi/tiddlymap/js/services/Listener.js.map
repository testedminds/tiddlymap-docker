{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Listener.js"],"names":["_NodeType","require","_EdgeType","_Edge","_utils","_vis","handleCancelDialog","_ref","param","_utils2","default","setField","handleClearTiddler","_ref2","arguments","length","undefined","paramObject","title","keep","tObj","originalFields","fields","fieldsToKeep","split","cloneFields","text","i","fieldName","$tw","wiki","deleteTiddler","addTiddler","Tiddler","_ref3$paramObject","_ref3","output","tiddlersStringArray","utils","parseStringArray","getMergedTiddlers","tiddlers","handleConfirmDialog","_ref4","handleSuppressDialog","_ref5","dialog","suppress","isTrue","$tm","ref","sysUserConf","_ref6","view","graph","adapter","getGraph","nodes","convert","edges","tRef","JSON","stringify","rootWidget","dispatchEvent","type","filename","handleConfigureSystem","allTiddlers","getMatches","selector","allPotentialNodes","allEdges","getEdgesForSet","plugin","getTiddler","path","pluginRoot","meta","getTiddlerData","sysMeta","hasLiveTab","liveTab","hasTag","handleDownloadGraph","numberOfNodes","numberOfEdges","Object","keys","pluginVersion","version","dataStructureVersion","dataStructureState","vis-inherited","_vis2","getText","visUserConf","config.sys","config","sys","open","args","isConfirmed","outTObj","getPropertiesByPrefix","setTiddlerData","handleGenerateWidget","_ref7","_ref7$paramObject","options","preselects","var.view","misc","defaultViewLabel","dialogManager","handleRemoveEdge","deleteEdge","handleCreateEdge","_ref9","from","to","isForce","force","tiddlerExists","makeNode","id","label","insertEdge","edge","notify","handleOpenTypeManager","_ref10","_ref10$paramObject","mode","match","allTypesSelector","allEdgeTypes","topic","allNodeTypes","typeRootPath","nodeTypes","searchSelector","handleLoadTypeForm","dialogTObj","_ref11$paramObject","_ref11","outTRef","_EdgeType2","getInstance","_NodeType2","save","count","fullPath","isShipped","vis","deleteByPrefix","handleSaveTypeForm","_ref12","deleteType","saveType","usage","_processEdgesWithType","action","removeNodeType","getTiddlerRef","dialogOutput","Type","newId","_ref13","_ref13$paramObject","_ref13$paramObject$id","newName","platforms","after","before","synchronous","addTWlisteners","tmap:tm-remove-edge","tmap:tm-load-type-form","tmap:tm-save-type-form","tmap:tm-create-type","handleCreateType","tmap:tm-suppress-dialog","tmap:tm-generate-widget","tmap:tm-download-graph","tmap:tm-configure-system","tmap:tm-manage-edge-types","tmap:tm-manage-node-types","tmap:tm-cancel-dialog","tmap:tm-merge-tiddlers","handleMixTiddlers","tmap:tm-confirm-dialog"],"mappings":"+KAaA,IAAAA,WAAAC,QAAA,iGACA,IAAAC,WAAAD,QAAA,iGACA,IAAAE,OAAAF,QAAA,qFACA,IAAAG,QAAAH,QAAA,wFACA,IAAAI,MAAAJ,QAAA,kKAOA,GAAMK,oBAAqB,QAArBA,GAAqBC,GAAa,GAAXC,GAAWD,EAAXC,KAC3BC,SAAAC,QAAMC,SAASH,EAAO,OAAQ;;;;;;;;;;;AAJhC,GAAAI,oBAAA,QAAAA,KAAA,GAAAC,GAAAC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,MAAAG,EAAAJ,EAAAI,WAAA,IAYSC,GAAeD,EAAfC,MAAOC,EAAQF,EAARE,IATwB,KAAXX,EAAW,MACtC,IAAAY,GAAAX,QAAAC,QAAMC,WAANO,EADF,IAAAG,GAAAD,EAAAA,EAAAE,SAeE,IAAMC,GAAeJ,EAAOA,EAAKK,UAXnC,IAAAC,IAaIP,MAAAA,EACAQ,KAAM,GAGR,KAAK,GAAIC,GAAIJ,EAAaR,OAAQY,KAAM,CACtC,GAAMC,GAAYL,EAAaI,EAC/BF,GAAYG,GAAaP,EAAeO,GAG1CC,IAAIC,KAAKC,cAAcb,EACvBW,KAAIC,KAAKE,WAAW,GAAIH,KAAII,QAAQR,IApBc,IAAvBR,mBAAAA,QAAAA,GAAAA,GAAuB,GAAAiB,GAAAC,EAAvBlB,YAAAA,EAAuBiB,IAAAlB,aAAAkB,CAAA,IAE5BjB,GAF4BA,EAE3CC,SAF2CkB,EAAAnB,EAAAmB,MA+BlD,KAAKC,IAAwBD,EAAQ,MA3BrC,IAAKlB,GAAOW,IAAAS,MAAAC,iBAAAF,EA8BZ,IAAMjB,GAAOX,QAAAC,QAAM8B,kBAAkBC,EAAUL,EA3B/CP,KAAMR,KAAAA,WAAAA,GAON,IAAAqB,qBAA0B3B,QAA1B2B,GAA0B3B,GAA1B,GAA0BA,GAA1B4B,EAA0B5B,KAExBU,SAAAA,QAAAA,SAAYG,EAAAA,OAAaP,KAQ7B,IAAAuB,sBAAA,QAAAA,GAAAC,GAAA,GAAA5B,GAAA4B,EAAA5B,WAAA,IA8BS6B,GAAoB7B,EAApB6B,OAAQC,EAAY9B,EAAZ8B,QA3BiC,IAAAtC,QAAAC,QAAAsC,OAAAD,EAAA,OAAtB9B,CAAsBR,QAAAC,QAAtBO,SAAsBgC,IAAAC,IAAAC,YAAA,qBAAAL,EAAA,OAOhD,IAAM1B,qBAAO,QAAPA,GAAOgC,GAAwBX,GAAlBD,GAAkBC,EAAlBD,WAAkBC,IAErCY,GAASrB,EAATqB,IATF,IAAAC,GAAAL,IAAAM,QAAAC,UAAAH,KAAAA,GAaAC,GAAAG,MAAAhD,QAAAC,QAAAgD,QAAAJ,EAAAG,MAAA,QA+BEH,GAAMK,MAAQlD,QAAAC,QAAMgD,QAAQJ,EAAMK,MAAO,QA5B3C,IAAMjB,GAAAA,qBAgCJjC,SAAAC,QAAMC,SAASiD,EAAM,OAAQC,KAAKC,UAAUR,EAAO,KAAM,GA9BzDzB,KAAAkC,WAAAC,eAFFC,KAAA,mBAoCIzD,MAAOoD,EA9BX3C,aAgCMiD,SAAab,EAAb,WAzBJ,IAAIc,uBAAapB,QAAboB,KAEH,GAAAC,GAAA3D,QAAAC,QAAA2D,WAAApB,IAAAqB,SAAAC,kBANH,IAAAC,GAAAvB,IAAAM,QAAAkB,eAAAL,EAyCE,IAAMM,GAAS7C,IAAIC,KAAK6C,WAAW1B,IAAI2B,KAAKC,YAAYvD,MA/B1D,IAAAwD,GAAAjD,IAAAC,KAAAiD,eAAA9B,IAAAC,IAAA8B,QAiCE,IAAMC,GAAaxE,QAAAC,QAAMiE,WAAW1B,IAAIC,IAAIgC,SAASC,OAAO,kBA9B9D,IAAMC,IAAyCC,cAAA,GAAAjB,EAAjBnD,OAAiBqE,cAE5BrE,GAF4BsE,OAAAC,KAAAhB,GAAAzD,OAmC3C0E,cAAAA,IAAmBf,EAAOgB,QAhC5BC,qBAAAA,IAA0BnC,EAASoC,mBAkCjC9C,QAhCFQ,YACMK,QAAQ,GAAAsB,EAkCRY,gBAAiBhC,KAAKC,UAALgC,MAAApF,SAhCjBkD,aAAOnD,QAAAC,QAAAqF,QAAb9C,IAAAC,IAAA8C,aAkCMC,aAAchD,IAAIiD,OAAOC,MA5B7B3F,KAAAA,cAF2B4F,KAAA,eAAAC,EAAA,SAAAC,EAAAC,GAIzBrC,IAAAA,EAAA,MAJJ,IAAAgC,GAAAzF,QAAAC,QAAA8F,sBAAAD,EAAAjF,OAAA,cAAA,KASFO,KAAAC,KAAA2E,eAAAxD,IAAAC,IAAAC,YAAA+C,EAqCI,IAAIzF,QAAAC,QAAMsC,OAAOuD,EAAQjF,OAAO4D,QAAS,OAAQ,CAhC7Cd,QAAAA,QAAAA,SAAcnB,IAAAC,IAAAgC,QAAMb,OAAN,uBACdG,CACAE,IAAAA,KAAS7C,cAAS8C,IAAAA,IAAW1B,SAInCxC,QAAAC,QAAM2F,SAAOpD,IAAAC,IAAA8C,YAAA,OAAAO,EAAAjF,OAAA,iBASP,IAAAoF,sBAAc,QAAdA,GAAcC,GAAc,GAAAC,GAAAD,EAAd1F,YAAAA,EAAc2F,IAAA5F,aAAA4F,CAHlB,IAAAC,IADN/D,QALVgE,YA+CMC,WAAa9F,EAAYoC,MAAQJ,IAAI+D,KAAKC,mBA5B9ChE,KAAAiE,cAAed,KAAA,sBAAMI,GAOrB,IAAAW,kBAAUnE,QAAVmE,GAAUnE,GAAe1B,GAAf0B,GAAe1B,EAAf0B,WAETC,KAFDM,QAEO6D,WAAAnG,GASV,IA7CDoG,kBAAA,QAAAA,GAAAC,GAAA,GAAArG,GAAAqG,EAAArG,WAAA,IA+CAsG,GAAAtG,EAAAsG,KAAAC,EAAAvG,EAAAuG,GAAAC,EAAAxG,EAAAyG,KAiCE,KAAKH,IAASC,EAAI,MA9BiC,IAAA/G,QAAAC,QAAAiH,cAAAJ,IAAtBtG,QAAAA,QAAAA,cAAsBuG,IAAAC,EAAA,CAmCjDhH,QAAAC,QAAMsB,WAAWwF,EAjCnB/G,SAAAC,QAAMmG,WAAUU,EAEZT,IAAAA,GAAAA,GAAAA,QAAAA,QACE7D,IAAAM,QAAAqE,SAAa3G,GAAYoC,GADfJ,IAAAM,QAAAqE,SAAAJ,GAAAK,GADN5G,EAAA6G,MADV7G,EAAA4G,GAFF5E,KAAAM,QAAAwE,WAAAC,EA8CI/E,KAAIgF,OAAO,kBAUf,IAAMC,uBAAwB,QAAxBA,GAAwBC,GAA8B,GAA5BlE,GAA4BkE,EAA5BlE,KAA4BmE,EAAAD,EAAtBlH,YAAAA,EAAsBmH,IAAApH,aAAAoH,CAG1D,IAAMC,GAAOpE,EAAKqE,MAAM,gBAAgB,EAjCE,IAAjBrH,IAAAA,oBAAAA,CAAiB,GAEnCsG,GAA4BtG,mBAFO,IAAAsH,GAAAtF,IAAAqB,SAAAkE,YAAA,IAElBf,GAAWxG,IAFO2D,KAEzB8C,cAqCV,CACL,GAAIe,GAAQ,mBApCd,IAAKlB,GAAatE,IAAAqB,SAAAoE,YAsChB,IAAIC,GAAe1F,IAAI2B,KAAKgE,UAlC5B,GAAAvC,IACAgC,KAAAA,EACAI,MAAAA,EAsCAI,eAAgBN,EApChBI,aAAaA,EAQb1F,IAAIgF,GAAOhF,IAAAiE,cAAXd,KAAA,wBAAAC,EApBJ,IAAApF,EAAAgD,KAAA,CAuDI6E,oBA7BJ7H,aA+BQoH,KAAMA,EACNR,GAAI5G,EAAYgD,KAChB7B,OAAQ2G,EAAWzH,OAAO,cAtB9B,IAAAwH,oBAAuB7F,QAAvB6F,GAAuB7F,GAAvB,GAAA+F,GAAAC,EAAuBhG,YAAauF,EAApCQ,EAAoCR,KAAAA,EAApCQ,EAAoCR,GAApCpG,EAAA4G,EAAA5G,MAED,IAJD8G,GAIO9G,CACL,IAAIqG,GAAQJ,IAAA,oBAAZc,WAAAzI,QAAA0I,YAAAvB,GAAAwB,WAAA3I,QAAA0I,YAAAvB,EAGD5D,GAAAqF,KAAAJ,EAAA,KAICT,IAAAA,IAAOA,oBAFI,CAGXI,GAAAA,GAAAA,IAAgBN,QAAAA,kBAHLtE,EAIX0E,IAAAA,GAAcA,OAAAA,KAAAA,GAAAA,MAJhBlI,SAAAC,QAAAC,SAAAuI,EAAA,kBAAAK,GA0CA1H,IAAIC,KAAKE,WAAW,GAAIH,KAAII,QAjC5BxB,QAAAC,QAAIO,WAAYgD,IAEZhD,SAAAA,EAAauI,SACXnB,mBADWpE,EAAAwF,UAAA,OAAA,GAEX5B,aAAI5G,EAAYgD,GAChB7B,gBAAQ2G,KAAWzH,UAAO2B,IAAlBiD,OAAAwD,OAuCdjJ,SAAAC,QAAMiJ,eAAe,uCA3B+C,IAAAC,oBAAA,QAAAA,GAAAC,GAAA,GAAA5I,GAAA4I,EAAA5I,WAAA,IAAAG,GAAAX,QAAAC,QAAAiE,WAAA1D,EAAAmB,OAAA,KAAfA,EAAe,MAuCpE,IAAMyF,GAAKzG,EAAKE,OAAOuG,EArCvB,IAAMqB,GAAAA,EAANb,IAwCA,IAAI5H,QAAAC,QAAMsC,OAAO5B,EAAKE,OAAO,mBAAoB,OAAQ,CArCzDwI,WAAAzB,EAAAR,EAAAzG,OACKkI,CAuCHS,SAAS1B,EAAMR,EAAIzG,IAjCnB,IAAA0I,YAAcvE,QAAduE,GAAcvE,EAAOC,EAAKwE,GAE3B,GAAA/F,GAAAoE,IAAA,oBAAAc,WAAAzI,QAAA0I,YAAAvB,GAAAwB,WAAA3I,QAAA0I,YAAAvB,EAEDhG,KAAIC,OAAKE,QAAW,gBAClBiC,EAGE,IAAAoE,IAAA,oBAA0BoB,CAC1BxG,IAAAM,QAAA0G,sBAHFhG,GAAAiG,OAAA,eAIE,CANJjH,IAAAM,QAAA4G,eAAAlG,GAWApC,IAAAC,KAAAE,WAAM2H,GAAAA,KAAAA,SA3BRzI,MAAAT,QAAAC,QAAA0J,cAAAC,KAkEEpH,KAAIgF,OAAO,gBA3BX,IAAMJ,UAAUvG,QAAVuG,GAAUvG,EAAOuG,EAAvBzF,GAsCA,GAAMhB,GAAOX,QAAAC,QAAMiE,WAAWvC,EAjC7B,IAFDkI,GAEOjC,IAAA,oBAAAc,WAAAzI,QAAA2I,WAAA3I,OACLqJ,IAAAA,GAAS1B,GAAMR,GAAIzG,EAAnBA,EACD6C,GAAAqF,MAsCD,IAAMiB,GAAQnJ,EAAKE,OAAO,aAE1B,IAAIiJ,GAASA,IAAUnJ,EAAKE,OAAO,MAAO,CAExC,GAAI+G,IAAS,oBAAqB,CAEhCpF,IAAIM,QAAQ0G,sBAAsBhG,GAlClCoE,OAAS,SACP9E,QAAQ0G,QAGb,CAEGnI,GAAAA,YAAAA,QAAKE,EAAeH,GAAII,MAC1Bf,KAAAA,KAAOa,cAAMqI,EAAAA,UAbjB3J,QAAAC,QAAAC,SAAAS,EAAA,KAAAmJ,GAwDEtH,IAAIgF,OAAO,mBAzBX,IAAMhE,kBAAO,QAAPA,GAAOuG,GAAb,GAAAC,GAAAD,EAA0BpJ,YAA1BiH,EAAAoC,EAAApC,KAAAqC,EAAAD,EAAA5C,GAAAA,EAAA6C,IAAA1J,UAAA,WAAA0J,EAAAtI,EAAAqI,EAAArI,MAoCA,IAAM6B,GAAQoE,IAAS,oBAAsB,GAAAc,YAAAzI,QAAamH,GAAM,GAAAwB,YAAA3I,QAAamH,EAE7E5D,GAAKqF,MAjCuCR,qBAAA7H,aAAA4G,GAAA5D,EAAA4D,GAAAQ,KAAAA,EAAAjG,OAAAA,KAMtCuI,IAAAA,MAAAA,QAAAA,KAASJ,eAFX,IAAAK,WAAAA,QAAAA,WAAA,UAFF,IAOOC,OAAAA,QAAAA,OAAA,aAAA,iBAmCJ,IAAMC,QAAAA,QAAAA,QAAW,QAjCjB,IAAAC,aAAAA,QAAAA,YAAA,IACDlJ,IAAIC,SAAAA,QAAAA,QAAKC,QAALD,KAELrB,QAAAC,QAAAsK,gBAkCDC,sBAAuB9D,iBAhCvB+D,yBAAe9J,mBAEhB+J,yBAAAvB,mBAiCCwB,sBAAuBC,iBA/BzBpI,sBAAWoE,iBA/BbiE,0BAAA1I,qBAiEI2I,0BAA2B7E,qBA9B/B8E,yBAAApG,oBAgCIqG,2BAA4BtH,sBAC5BuH,4BAA6BxD,sBAC7ByD,4BAA6BzD,sBAC7B0D,wBAAyBtL,mBA9BvB+K,wBAAmBzK,mBAAwDiL,yBAAAC,kBAAAC,yBAAArJ,qBAAAb,IAAAkC,WAf5E/C","file":"../../../../../felixhayashi/tiddlymap/js/services/Listener.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/listener\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport NodeType from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport visDefConf from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\n\n/*** Code **********************************************************/\n\n/**\n * @param {Object} param - event.param\n */\nconst handleCancelDialog = ({param}) => {\n  utils.setField(param, 'text', '');\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleClearTiddler = ({paramObject} = {})  => {\n\n  const {title, keep} = paramObject;\n\n  if (!title) return;\n\n  const tObj = utils.getTiddler(title);\n  const originalFields = tObj ? tObj.fields : {};\n  const fieldsToKeep = keep ? keep.split() : [];\n  const cloneFields = {\n    title,\n    text: '' // see https://github.com/Jermolene/TiddlyWiki5/issues/2025\n  };\n\n  for (let i = fieldsToKeep.length; i--;) {\n    const fieldName = fieldsToKeep[i];\n    cloneFields[fieldName] = originalFields[fieldName];\n  }\n\n  $tw.wiki.deleteTiddler(title);\n  $tw.wiki.addTiddler(new $tw.Tiddler(cloneFields));\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleMixTiddlers = ({paramObject = {}}) => {\n\n  const {tiddlers: tiddlersStringArray, output} = paramObject;\n\n  if (!tiddlersStringArray || !output) return;\n\n  const tiddlers = $tw.utils.parseStringArray(tiddlersStringArray);\n  const tObj = utils.getMergedTiddlers(tiddlers, output);\n\n  $tw.wiki.addTiddler(tObj);\n\n};\n\n/**\n * @param {string} param - event.param\n */\nconst handleConfirmDialog = ({param}) => {\n\n  utils.setField(param, 'text', '1');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleSuppressDialog = ({paramObject}) => {\n\n  const {dialog, suppress} = paramObject;\n\n  if (utils.isTrue(suppress, false)) {\n    utils.setEntry($tm.ref.sysUserConf, `suppressedDialogs.${dialog}`, true);\n  }\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleDownloadGraph = ({paramObject}) => {\n\n  const { view } = paramObject;\n  const graph = $tm.adapter.getGraph({ view });\n\n  graph.nodes = utils.convert(graph.nodes, 'array');\n  graph.edges = utils.convert(graph.edges, 'array');\n\n  const tRef = '$:/temp/tmap/export';\n\n  utils.setField(tRef, 'text', JSON.stringify(graph, null, 2));\n\n  $tw.rootWidget.dispatchEvent({\n    type: 'tm-download-file',\n    param: tRef,\n    paramObject: {\n      filename: `${view}.json`\n    }\n  });\n};\n\n/**\n *\n */\nconst handleConfigureSystem = () => {\n\n  const allTiddlers = utils.getMatches($tm.selector.allPotentialNodes);\n  const allEdges = $tm.adapter.getEdgesForSet(allTiddlers);\n  const plugin = $tw.wiki.getTiddler($tm.path.pluginRoot).fields;\n  const meta = $tw.wiki.getTiddlerData($tm.ref.sysMeta);\n  const hasLiveTab = utils.getTiddler($tm.ref.liveTab).hasTag('$:/tags/SideBar');\n\n  const args = {\n    numberOfNodes: '' + allTiddlers.length,\n    numberOfEdges: '' + Object.keys(allEdges).length,\n    pluginVersion: `v${plugin.version}`,\n    dataStructureVersion: `v${meta.dataStructureState}`,\n    dialog: {\n      preselects: {\n        'liveTab': '' + hasLiveTab,\n        'vis-inherited': JSON.stringify(visDefConf),\n        'config.vis': utils.getText($tm.ref.visUserConf),\n        'config.sys': $tm.config.sys,\n      }\n    }\n  };\n\n  $tm.dialogManager.open('globalConfig', args, (isConfirmed, outTObj) => {\n\n    if (!isConfirmed) return;\n\n    const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.sys.', true);\n\n    // CAREFUL: this is a data tiddler!\n    $tw.wiki.setTiddlerData($tm.ref.sysUserConf, config);\n\n    // show or hide the live tab; to hide the live tab, we override\n    // the shadow tiddler; to show it, we remove the overlay again.\n    if (utils.isTrue(outTObj.fields.liveTab, false)) {\n      utils.setField($tm.ref.liveTab, 'tags', '$:/tags/SideBar');\n    } else {\n      $tw.wiki.deleteTiddler($tm.ref.liveTab);\n    }\n\n    // tw doesn't translate the json to an object so this is already a string\n    utils.setField($tm.ref.visUserConf, 'text', outTObj.fields['config.vis']);\n\n  });\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleGenerateWidget = ({paramObject = {}}) => {\n\n  const options = {\n    dialog: {\n      preselects: {\n        'var.view': (paramObject.view || $tm.misc.defaultViewLabel)\n      }\n    }\n  };\n\n  $tm.dialogManager.open('widgetCodeGenerator', options);\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleRemoveEdge = ({paramObject}) => {\n\n  $tm.adapter.deleteEdge(paramObject);\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleCreateEdge = ({paramObject}) => {\n\n  const {from, to, force: isForce} = paramObject;\n\n  if (!from || !to) return;\n\n  if ((utils.tiddlerExists(from) && utils.tiddlerExists(to)) || isForce) {\n\n    // will not override any existing tiddlers…\n    utils.addTiddler(to);\n    utils.addTiddler(from);\n\n    const edge = new Edge(\n      $tm.adapter.makeNode(from).id,\n      $tm.adapter.makeNode(to).id,\n      paramObject.label,\n      paramObject.id\n    );\n\n    $tm.adapter.insertEdge(edge);\n    $tm.notify('Edge inserted');\n\n  }\n\n};\n\n/**\n * @param {string} type - event.type\n * @param {Object} [paramObject] - event.paramObject\n */\nconst handleOpenTypeManager = ({type, paramObject = {}}) => {\n\n  // either 'manage-edge-types' or 'manage-node-types'\n  const mode = type.match(/tmap:tm-(.*)/)[1];\n\n  if (mode === 'manage-edge-types') {\n    var topic = 'Edge-Type Manager';\n    var allTypesSelector = $tm.selector.allEdgeTypes;\n    var typeRootPath = $tm.path.edgeTypes;\n  } else {\n    var topic = 'Node-Type Manager';\n    var allTypesSelector = $tm.selector.allNodeTypes;\n    var typeRootPath = $tm.path.nodeTypes;\n  }\n\n  const args = {\n    mode: mode,\n    topic: topic,\n    searchSelector: allTypesSelector,\n    typeRootPath: typeRootPath\n  };\n\n  const dialogTObj = $tm.dialogManager.open('MapElementTypeManager', args);\n\n  if (paramObject.type) {\n    handleLoadTypeForm({\n      paramObject: {\n        mode: mode,\n        id: paramObject.type,\n        output: dialogTObj.fields['output']\n      }\n    });\n  }\n\n};\n\n/**\n * @param {string} id - The id of a {@link MapElementType}\n * @param {('manage-edge-types'|'manage-node-types')} mode\n * @param {TiddlerReference} output\n */\nconst handleLoadTypeForm = ({ paramObject: { mode, id, output } }) => {\n\n  const outTRef = output;\n  const type = (mode === 'manage-edge-types' ? EdgeType.getInstance(id) : NodeType.getInstance(id));\n\n  // inject all the type data as fields into the dialog output\n  type.save(outTRef, true);\n\n  // fields that need preprocessing\n\n  if (mode === 'manage-edge-types') {\n    const usage = $tm.adapter.selectEdgesByType(type);\n    const count = Object.keys(usage).length;\n    utils.setField(outTRef, 'temp.usageCount', count);\n  }\n\n  $tw.wiki.addTiddler(new $tw.Tiddler(\n    utils.getTiddler(outTRef),\n    {\n      'typeTRef': type.fullPath,\n      'temp.idImmutable': (type.isShipped ? 'true' : ''),\n      'temp.newId': type.id,\n      'vis-inherited': JSON.stringify($tm.config.vis)\n    }\n  ));\n\n  // reset the tabs to default\n  utils.deleteByPrefix('$:/state/tabs/MapElementTypeManager');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleSaveTypeForm = ({paramObject}) => {\n\n  const tObj = utils.getTiddler(paramObject.output);\n  if (!tObj) return;\n\n  const id = tObj.fields.id;\n  const mode = paramObject.mode;\n\n  if (utils.isTrue(tObj.fields['temp.deleteType'], false)) {\n    deleteType(mode, id, tObj);\n  } else {\n    saveType(mode, id, tObj);\n  }\n\n};\n\nconst deleteType = (mode, id, dialogOutput) => {\n\n  const type = (mode === 'manage-edge-types' ? EdgeType.getInstance(id) : NodeType.getInstance(id));\n\n  $tm.logger('debug', 'Deleting type', type);\n\n  if (mode === 'manage-edge-types') {\n    $tm.adapter._processEdgesWithType(type, {action: 'delete'});\n  } else {\n    $tm.adapter.removeNodeType(type);\n  }\n\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title: utils.getTiddlerRef(dialogOutput)\n  }));\n\n  $tm.notify('Deleted type');\n\n};\n\n/**\n * @param {string} id - The id of a {@link MapElementType}\n * @param {('manage-edge-types'|'manage-node-types')} mode\n * @param {TiddlerReference} output\n */\nconst saveType = (mode, id, output) => {\n\n  const tObj = utils.getTiddler(output);\n\n  // update the type with the form data\n  const Type = (mode === 'manage-edge-types' ? EdgeType : NodeType);\n  const type = new Type(id, tObj);\n  type.save();\n\n  const newId = tObj.fields['temp.newId'];\n\n  if (newId && newId !== tObj.fields['id']) { //renamed\n\n    if (mode === 'manage-edge-types') {\n\n      $tm.adapter._processEdgesWithType(type, {\n        action: 'rename',\n        newName: newId\n      });\n\n    } else {\n\n      (new NodeType(newId, type)).save();\n      $tw.wiki.deleteTiddler(type.fullPath);\n\n    }\n\n    utils.setField(tObj, 'id', newId);\n\n  }\n\n  $tm.notify('Saved type data');\n\n};\n\n/**\n * @param {string} id - The id of a {@link MapElementType}\n * @param {('manage-edge-types'|'manage-node-types')} mode\n * @param {TiddlerReference} output\n */\nconst handleCreateType = ({ paramObject: { mode, id = 'New type', output } }) => {\n\n  const type = (mode === 'manage-edge-types' ? new EdgeType(id) : new NodeType(id));\n\n  type.save();\n\n  handleLoadTypeForm({ paramObject: { id: type.id, mode, output } });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.listener';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'rootwidget', 'tmap.caretaker' ];\nexport const before = [ 'story' ];\nexport const synchronous = true;\nexport const startup = () => {\n  utils.addTWlisteners({\n    'tmap:tm-remove-edge': handleRemoveEdge,\n    'tmap:tm-load-type-form': handleLoadTypeForm,\n    'tmap:tm-save-type-form': handleSaveTypeForm,\n    'tmap:tm-create-type': handleCreateType,\n    'tmap:tm-create-edge': handleCreateEdge,\n    'tmap:tm-suppress-dialog': handleSuppressDialog,\n    'tmap:tm-generate-widget': handleGenerateWidget,\n    'tmap:tm-download-graph': handleDownloadGraph,\n    'tmap:tm-configure-system': handleConfigureSystem,\n    'tmap:tm-manage-edge-types': handleOpenTypeManager,\n    'tmap:tm-manage-node-types': handleOpenTypeManager,\n    'tmap:tm-cancel-dialog': handleCancelDialog,\n    'tmap:tm-clear-tiddler': handleClearTiddler,\n    'tmap:tm-merge-tiddlers': handleMixTiddlers,\n    'tmap:tm-confirm-dialog': handleConfirmDialog\n  }, $tw.rootWidget, this);\n};\n"],"sourceRoot":"../../../../../../src/plugins"}