{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/ConfigurationWidget.js"],"names":["_utils","require","_vis","_widget","MapConfigWidget","parseTreeNode","options","widget","call","this","initialise","computeAttributes","prototype","Object","create","render","parent","nextSibling","parentDomNode","domNode","document","createElement","$tw","utils","addClass","insertBefore","network","networkContainer","refreshTrigger","getAttribute","pipeTRef","getVariable","inheritedFields","parseStringArray","extensionTField","i","length","_utils2","default","parseFieldData","fieldName","mode","edges","style","nodes","inherited","merge","extension","isSaveOnlyChanges","isTrue","changes","data","extend","configure","enabled","showButton","filter","getOptionFilter","_vis2","Network","handleConfigChange","bind","getBoundingClientRect","height","reset","handleResetEvent","addEventListener","$tm","registry","push","enhanceConfigurator","ev","change","detail","trigger","path","flatten","flatChange","confPath","keys","isReset","unflatten","flatChanges","writeFieldData","config","sys","jsonIndentation","cls","div","window","setTimeout","refresh","getElementsByClassName","children","list","elements","classList","contains","conf","VisConfElement","el","pos","getByCls","labelEl","labelText","innerText","textContent","label","match","className","level","parseInt","prev","setActive","isEnable","button","dispatchEvent","CustomEvent","self","bubbles","whitelist","borderWidth","color","borderWidthSelected","background","icon","font","size","shapeProperties","shape","borderDashes","arrows","dashes","labelHighlightBold","selfReferenceSize","shadow","smooth","width","interaction","hideEdgesOnDrag","tooltipDelay","initiallyActive","hierarchical","forceAtlas2Based","manipulation","springConstant","physics","centralGravity","concat","option","wlObj","l","isZombieWidget","body","destruct","destroy","changedTiddlers","refreshSelf","setNull","obj","p","_typeof","undefined","exports"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/ConfigurationWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapConfigWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport vis from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\n\n/**\n * Wrapper for the Visjs configurator.\n *\n * ```\n * <$tmap-config\n *     inherited=\"FIELDNAME FIELDNAME …\"\n *     extension=\"FIELDNAME\"\n *     changes=\"FIELDNAME\" (default: same field as extension)\n *     override=\"true|false\" (default: false)\n *     mode=\"manage-*\"\n *     refresh-trigger=\"tRef\" />\n * ```\n *\n * @constructor\n */\nfunction MapConfigWidget(parseTreeNode, options) {\n\n  // call the parent constructor\n  Widget.call(this);\n\n  // call initialise on prototype\n  this.initialise(parseTreeNode, options);\n\n  // make the html attributes available to this widget\n  this.computeAttributes();\n\n}\n\n// !! EXTENSION !!\nMapConfigWidget.prototype = Object.create(Widget.prototype);\n// !! EXTENSION !!\n\n/**\n * Method to render this widget into the DOM.\n *\n * @override\n */\nMapConfigWidget.prototype.render = function(parent, nextSibling) {\n\n  // remember our place in the dom\n  this.parentDomNode = parent;\n\n  if (!this.domNode) {\n    this.domNode = this.document.createElement('div');\n    $tw.utils.addClass(this.domNode, 'tmap-config-widget');\n    parent.insertBefore(this.domNode, nextSibling);\n  }\n\n  if (this.network) {\n\n    // destroy any previous instance\n    this.network.destroy();\n\n  }\n\n  // create container for vis configurator; destroyed when vis is destroyed\n  this.networkContainer = document.createElement('div');\n  this.domNode.appendChild(this.networkContainer);\n\n  // get environment\n  this.refreshTrigger = this.getAttribute('refresh-trigger');\n  this.pipeTRef = this.getVariable('currentTiddler');\n  this.inheritedFields = $tw.utils.parseStringArray(this.getAttribute('inherited'));\n  this.extensionTField = this.getAttribute('extension');\n  this.mode = this.getAttribute('mode');\n\n  // load inherited options\n  for (var i = 0; i < this.inheritedFields.length; i++) {\n    var fieldName = this.inheritedFields[i];\n    var style = utils.parseFieldData(this.pipeTRef, fieldName, {});\n\n    // maybe the inherited options also come without a top level property\n    // so we do the same here to…\n    // TODO looks clumsy; do it in a more generic way…\n    if (this.mode === 'manage-edge-types') {\n      if (!style.edges) { style = { edges: style }; }\n    } else if (this.mode === 'manage-node-types') {\n      if (!style.nodes) { style = { nodes: style }; }\n    }\n\n    this.inherited = utils.merge(this.inherited, style);\n\n  }\n\n  // load extension to the inherited options; since we store vis config\n  // for nodes and edges without the top level property, we may need to\n  // append it again, if not done so already.\n  this.extension = utils.parseFieldData(this.pipeTRef, this.extensionTField, {});\n  // TODO looks clumsy; do it in a more generic way…\n  if (this.mode === 'manage-edge-types') {\n    if (!this.extension.edges) {\n      this.extension = { edges: this.extension };\n    }\n  } else if (this.mode === 'manage-node-types') {\n    if (!this.extension.nodes) {\n      this.extension = { nodes: this.extension };\n    }\n  }\n\n  // we record all changes in a separate variable\n  var isSaveOnlyChanges = utils.isTrue(this.getAttribute('save-only-changes'));\n  this.changes = (isSaveOnlyChanges ? {} : this.extension);\n\n  var data = { nodes: [], edges: [] };\n  var options = utils.merge({}, this.inherited, this.extension);\n  $tw.utils.extend(options, {\n    configure: {\n      enabled: true,\n      showButton: false,\n      filter: this.getOptionFilter(this.mode)\n    }\n  });\n\n  this.network = new vis.Network(this.networkContainer, data, options);\n  this.network.on('configChange', this.handleConfigChange.bind(this));\n\n  // giving the parent a css height will prevent it from jumping\n  // back when the network is destroyed and the network\n  // container is removed.\n  // fixes https://github.com/almende/vis/issues/1568\n  var height = this.parentDomNode.getBoundingClientRect().height;\n  this.parentDomNode.style['height'] = height + 'px';\n\n  var reset = this.handleResetEvent.bind(this);\n  this.networkContainer.addEventListener('reset', reset, false);\n\n  // register this graph at the caretaker's graph registry\n  $tm.registry.push(this);\n\n\n  this.enhanceConfigurator();\n\n};\n\n/**\n * I only receive the option that has actually changed\n */\nMapConfigWidget.prototype.handleResetEvent = function(ev) {\n  var change = {};\n  change[ev.detail.trigger.path] = null;\n  this.handleConfigChange(change);\n};\n\n/**\n * I only receive the option that has actually changed\n */\nMapConfigWidget.prototype.handleConfigChange = function(change) {\n\n  var flatChanges = utils.flatten(this.changes);\n  var flatChange = utils.flatten(change);\n  var confPath = Object.keys(utils.flatten(change))[0];\n  var isReset = (flatChange[confPath] === null);\n\n  if (isReset) { // we interpret this as delete\n\n    flatChanges[confPath] = undefined;\n    this.changes = utils.unflatten(flatChanges);\n\n  } else {\n\n    this.changes = utils.merge(this.changes, change);\n  }\n\n  // when storing edge- or node-styles we strip the root property\n  var options = utils.merge({}, this.changes);\n  if (this.mode === 'manage-node-types') { options = options['nodes']; }\n  if (this.mode === 'manage-edge-types') { options = options['edges']; }\n\n  // save changes\n  utils.writeFieldData(this.pipeTRef, this.extensionTField, options, $tm.config.sys.jsonIndentation);\n\n  // hack to ensure vis doesn't scroll\n  var cls = 'vis-configuration-wrapper';\n  var div = this.networkContainer.getElementsByClassName(cls)[0];\n  div.style.height = div.getBoundingClientRect().height + 'px';\n\n  if (isReset) {\n\n    // we need to use a timeout here, otherwise we cause a vis bug\n    // since it is in the middle of storing the value!\n    window.setTimeout(this.refresh.bind(this), 0);\n\n  } else {\n\n    // add active-config indicators\n    window.setTimeout(this.enhanceConfigurator.bind(this), 50);\n\n  }\n\n};\n\n/**\n * enhanceConfigurator over all config items and add an indicator.\n */\nMapConfigWidget.prototype.enhanceConfigurator = function() {\n\n  var cls = 'vis-configuration-wrapper';\n  var elements = this.networkContainer\n                     .getElementsByClassName(cls)[0].children;\n  var list = [];\n  var changes = utils.flatten(this.changes);\n  for (var i = 0; i < elements.length; i++) {\n    if (!elements[i].classList.contains('vis-config-item')) continue;\n\n    var conf = new VisConfElement(elements[i], list, i);\n    list.push(conf);\n\n    if (conf.level === 0) continue;\n\n    conf.setActive(!!changes[conf.path]);\n\n  }\n};\n\n/**\n *\n * @param {DOMElement} The config item element.\n * @param {Array<VisConfElement>} a list of VisConfElements of which\n *     this element is also part of.\n * @param {number} the position in the list\n */\nfunction VisConfElement(el, list, pos) {\n\n  var getByCls = 'getElementsByClassName';\n\n  this.el = el;\n  this.labelEl = el[getByCls]('vis-config-label')[0]\n                 || el[getByCls]('vis-config-header')[0]\n                 || el;\n  var labelText = (this.labelEl.innerText || this.labelEl.textContent);\n  this.label = labelText && labelText.match(/([a-zA-Z0-9]+)/)[1];\n  this.level = parseInt(el.className.match(/.*vis-config-s(.).*/)[1]) || 0;\n\n  this.path = this.label;\n\n  if (this.level > 0) {\n    for (var i = pos; i--;) {\n      var prev = list[i];\n      if (prev.level < this.level) {\n        this.path = prev.path + '.' + this.path;\n        break;\n      }\n    }\n  }\n}\n\nVisConfElement.prototype.setActive = function(isEnable) {\n\n  if (!isEnable) return;\n\n  // cannot use utils.hasKeyWithPrefix because some keys start with\n  // same value as others\n  var cls = 'tmap-vis-config-item-' + (isEnable ? 'active' : 'inactive');\n  $tw.utils.addClass(this.el, cls);\n\n  if (isEnable) {\n\n    var button = document.createElement('button');\n    button.innerHTML = 'reset';\n    button.className = 'tmap-config-item-reset';\n\n    var self = this;\n\n    button.addEventListener('click', function(ev) {\n      ev.currentTarget.dispatchEvent(new CustomEvent('reset', {\n        detail: { trigger: self },\n        bubbles: true,\n        cancelable: true\n      }));\n    }, false);\n\n    this.el.appendChild(button);\n  }\n\n};\n\n/**\n *\n *\n */\nMapConfigWidget.prototype.getOptionFilter = function(mode) {\n\n  var whitelist = {\n    nodes: {\n      borderWidth: true,\n      borderWidthSelected: true,\n      color: {\n        background: true,\n        border: true\n      },\n      font: {\n        color: true,\n        size: true\n      },\n      icon: true,\n      labelHighlightBold: false,\n      shadow: true,\n      shape: true,\n      shapeProperties: {\n        borderDashes: true,\n\n      },\n      size: true\n    },\n    edges: {\n      arrows: true,\n      color: true,\n      dashes: true,\n      font: true,\n      labelHighlightBold: false,\n      length: true,\n      selfReferenceSize: false,\n      shadow: true,\n      smooth: true,\n      width: true\n    },\n    interaction: {\n      hideEdgesOnDrag: true,\n      hideNodesOnDrag: true,\n      tooltipDelay: true\n    },\n    layout: {\n      hierarchical: false\n    },\n    manipulation: {\n      initiallyActive: true\n    },\n    physics: {\n      forceAtlas2Based: {\n        gravitationalConstant: true,\n        springLength: true,\n        springConstant: true,\n        damping: true,\n        centralGravity: true\n      }\n    }\n  };\n\n  if (mode === 'manage-edge-types') {\n    whitelist = { edges: whitelist.edges };\n  } else if (mode === 'manage-node-types') {\n    whitelist = { nodes: whitelist.nodes };\n  } else {\n    whitelist.edges.arrows = false;\n  }\n\n  return function(option, path) {\n\n    // operate on a clone; add option as element\n    path = path.concat([ option ]);\n\n    var wlObj = whitelist;\n    for (var i = 0, l = path.length; i < l; i++) {\n      if (wlObj[path[i]] === true) {\n        return true;\n      } else if (wlObj[path[i]] == null) {\n        return false;\n      } // else assume object\n      wlObj = wlObj[path[i]];\n    }\n\n    return false;\n\n  };\n\n};\n\n/**\n * A zombie widget is a widget that is removed from the dom tree\n * but still referenced or still partly executed -- I mean\n * otherwise you couldn't call this function, right?\n *\n * @TODO Outsource this as interface or common super class\n */\nMapConfigWidget.prototype.isZombieWidget = function() {\n\n  return !document.body.contains(this.parentDomNode);\n\n};\n\n/**\n * called from outside.\n *\n * @TODO Outsource this as interface or common super class\n */\nMapConfigWidget.prototype.destruct = function() {\n\n  if (this.network) {\n    this.network.destroy();\n  }\n\n};\n\n/**\n * This function is called by the system to notify the widget about\n * tiddler changes.\n *\n * @override\n */\nMapConfigWidget.prototype.refresh = function(changedTiddlers) {\n\n  if (this.isZombieWidget() || !this.network) return;\n\n  if (!changedTiddlers || changedTiddlers[this.refreshTrigger]) {\n    this.refreshSelf();\n    return true;\n  }\n\n};\n\nMapConfigWidget.prototype.setNull = function(obj) {\n\n  for (var p in obj) {\n\n    if (typeof obj[p] == 'object') {\n\n      this.setNull(obj[p]);\n    } else {\n\n      obj[p] = undefined;\n    }\n  }\n\n};\n\n\n/*** Exports *******************************************************/\n\nexports['tmap-config'] = MapConfigWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}