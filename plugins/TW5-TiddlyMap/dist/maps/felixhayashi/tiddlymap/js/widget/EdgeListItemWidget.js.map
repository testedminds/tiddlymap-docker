{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/EdgeListItemWidget.js"],"names":["_widget","require","_utils","EdgeListItemWidget","parseTreeNode","options","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","arrows","$tm","misc","item","tRef","tracker","getTiddlerById","neighbour","id","edge","_utils2","default","flatten","p","setVariable","type","indeces","allETy","indexedAs","to","arrow","invertedArrow","in","makeChildWidgets","changedTiddlers","refreshChildren","exports"],"mappings":"2RAaA,IAAAA,SAAAC,QAAA,oCACA,IAAAC,QAAAD,QAAA;;;;;;;;;;GAIME,8CAEJ,SAAAA,GAAYC,EAAeC,GAASC,gBAAAC,KAAAJ,EAAA,IAAAK,GAAAC,2BAAAF,MAAAJ,EAAAO,WAAAC,OAAAC,eAAAT,IAAAU,KAAAN,KAE5BH,EAAeC,GACrBG,GAAKM,OAASC,IAAIC,KAAKF,MAHW,OAAAN,qDAJtC,GAAAS,GAAAV,KAAAH,aAcI,IAAMc,GAAOH,IAAII,QAAQC,eAAeH,EAAKI,UAAUC,GAGvD,IAAMC,GAAOC,QAAAC,QAAMC,QAAQT,EAAKM,KAbE,KAAA,GAAAI,KAAAJ,GAAA,CAgBhC,SAAWA,GAAKI,KAAO,SAAU,CAhBDpB,KAAAqB,YAAA,QAAAD,EAAAJ,EAAAI,KAKnCpB,KAAAqB,YAAA,iBAAAV,EAkBCX,MAAKqB,YAAY,YAAaV,EAE9B,IAAMW,GAAOd,IAAIe,QAAQC,OAAOR,EAAKM,KACrC,IAAMG,GAAaT,EAAKU,KAnBhBhB,EAAAI,UAAAC,GAAA,KAAA,MAoBR,IAAIY,GAAQF,CAjBZ,IAAAH,EAAMX,QAAWC,CAoBfe,EAAQ,SAlBV,CACA,GAAMX,IAAO,MAAAM,EAAMH,cAAnB,CAoBIQ,EAAQ,WAlBP,IAALF,IAAoB,QAAAH,EAAAM,cAAA,CAClBD,EAAI,MAuBN3B,KAAKqB,YAAY,YAAaM,EAlB9B3B,MAAAqB,YAAA,kBAAAM,IAAA,KACA3B,KAAKqB,OAAAA,GACLM,IAAKN,OAoBCrB,KAAKO,OAAOsB,GAlBZP,KAAAA,OAAWC,IAsBjBvB,MAAK8B,qDAfHC,GAEC,MAFD/B,MAEOgC,gBAAIP,gCA0BjBQ,SAAQ,qBAAuBrC","file":"../../../../../felixhayashi/tiddlymap/js/widget/EdgeListItemWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/EdgeListWidgetItem\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nclass EdgeListItemWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n\n    super(parseTreeNode, options);\n    this.arrows = $tm.misc.arrows;\n\n  }\n\n  execute() {\n\n    const item = this.parseTreeNode;\n    const tRef = $tm.tracker.getTiddlerById(item.neighbour.id);\n\n    // make edge properties available as variables\n    const edge = utils.flatten(item.edge);\n\n    for (let p in edge) {\n      if (typeof edge[p] === 'string') {\n        this.setVariable(`edge.${p}`, edge[p]);\n      }\n    }\n\n    // Perspective: Neighbour\n    this.setVariable('currentTiddler', tRef);\n    this.setVariable('neighbour', tRef);\n\n    const type = $tm.indeces.allETy[edge.type];\n    const indexedAs = (edge.to === item.neighbour.id ? 'to' : 'from');\n    let arrow = indexedAs;\n\n    if (type.biArrow) {\n      arrow = 'bi';\n    } else {\n      if (indexedAs === 'to' && type.invertedArrow) {\n        arrow = 'from';\n      } else if (indexedAs === 'from' && type.invertedArrow) {\n        arrow = 'to';\n      }\n    }\n\n    this.setVariable('direction', arrow);\n    this.setVariable('directionSymbol', arrow === 'bi'\n      ? this.arrows.bi\n      : arrow === 'from'\n        ? this.arrows.in\n        : this.arrows.out);\n\n    // Construct the child widgets\n    this.makeChildWidgets();\n\n  }\n\n  refresh(changedTiddlers) {\n\n    return this.refreshChildren(changedTiddlers);\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexports['tmap-edgelistitem'] = EdgeListItemWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}