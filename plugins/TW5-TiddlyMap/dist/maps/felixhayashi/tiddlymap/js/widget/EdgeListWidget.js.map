{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/EdgeListWidget.js"],"names":["_widget","require","_utils","EdgeListWidget","parseTreeNode","options","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","parent","nextSibling","parentDomNode","computeAttributes","execute","nodes","getVariable","filter","getAttribute","direction","allETy","$tm","indeces","matches","_utils2","default","getEdgeTypeMatches","typeWL","_$tm$adapter$getNeigh","adapter","getNeighbours","neighbours","edges","entries","id","to","edge","from","push","type","neighbour","children","wasEmpty","removeChildDomNodes","parser","wiki","parseText","length","parseAsInline","changedTiddlers","changedAttributes","hasElements","refreshSelf","tRef","isSystemOrDraft","refreshChildren","exports"],"mappings":"2RAaA,IAAAA,SAAAC,QAAA,oCACA,IAAAC,QAAAD,QAAA;;;;;;;;;;GAIME,0CAEJ,SAAAA,GAAYC,EAAeC,GAASC,gBAAAC,KAAAJ,EAAA,OAAAK,4BAAAD,MAAAJ,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAL,KAE5BH,EAAeC,mDAIhBQ,EAAQC,GAEbP,KAAKQ,cAAgBF,CAZzBN,MAAAS,mBAcIT,MAAKU,SAZHd,MAAAA,eAakBU,EAAQC,uCAXM,GAAAI,IAAAX,KAAAY,YAAA,kBAInC,IAAAC,GAAAb,KAAAc,aAAA,SAAA,GAeC,IAAMC,GAAYf,KAAKc,aAAa,YAAa,OACjD,IAAME,GAASC,IAAIC,QAAQF,MAC3B,IAAMG,GAAUC,QAAAC,QAAMC,mBAAmBT,EAAQG,EAEjD,IAAMlB,IAfNyB,OAAKf,QAAAA,QAAAA,eAALW,GACAJ,UAAKN,EAT6B,IAAAe,GA6BGP,IAAIQ,QAAQC,cAAcf,EAAOb,GAAvD6B,EA7BmBH,EA6B1Bb,MAAmBiB,EA7BOJ,EA6BPI,KAE3B,IAAIC,KACJ,KAAK,GAAIC,KAAMF,GAAO,CAdtB,GAAMf,GAASe,EAAKd,EACpB,IAAMC,GAAYY,EAAKb,EAAaiB,KAAAJ,EAAaK,EAAjDC,KAEA,KAAMd,EAAU,CAiBZ,SAfYU,EAAhBK,MAoBIC,KAAM,oBAfVH,KAAAA,EAiBIT,OAAQzB,EAAQyB,OA9BZa,UAAAA,EAkCJC,SAAUrC,KAAKH,cAAcwC,WAf/B,IAAAR,EAAMG,OAAaF,CAqBnB9B,KAAKsC,SAAW,IAlBhBT,GAAKO,KAAAA,sBACH,IAAApC,KAAAsC,SAAA,CAGFtC,KAAAuC,sBAIEhB,KAAAA,iBAAgBA,+CAMnB,GAAAiB,GAAAxC,KAAAyC,KAAAC,UAqBC,sBAnBF1C,KAAK6B,aAAQc,eAAQ,KAqBjBC,cAAe,MAhBlB,OALDJ,GAKWA,EAAKF,0CAKfO,GAED,GAAAC,GAAsBjB,KAAtBpB,mBAoBA,IAAIW,QAAAC,QAAM0B,YAAYD,GAAoB,CAExC9C,KAAKgD,aAhBP,OAAMR,MAQP,IAAA,GAAAS,KAAAJ,GAAA,CAcG,IAAKzB,QAAAC,QAAM6B,gBAAgBD,GAAO,CAEhCjD,KAAKgD,aAZT,OAAMF,OAmBN,MAAO9C,MAAKmD,gBAAgBN,gCAPxBO,SAAA,oBAAAxD","file":"../../../../../felixhayashi/tiddlymap/js/widget/EdgeListWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/EdgeListWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nclass EdgeListWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n\n    super(parseTreeNode, options);\n\n  }\n\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n    this.computeAttributes();\n    this.execute();\n    this.renderChildren(parent, nextSibling);\n\n  };\n\n  execute() {\n\n    const nodes = [ this.getVariable('currentTiddler') ];\n    const filter = this.getAttribute('filter', '');\n    const direction = this.getAttribute('direction', 'both');\n    const allETy = $tm.indeces.allETy;\n    const matches = utils.getEdgeTypeMatches(filter, allETy);\n\n    const options = {\n      typeWL: utils.getLookupTable(matches),\n      direction: direction\n    };\n\n    // retrieve nodes and edges\n    const { nodes: neighbours, edges } = $tm.adapter.getNeighbours(nodes, options);\n\n    let entries = [];\n    for (let id in edges) {\n\n      const edge = edges[id];\n      const neighbour = neighbours[edge.to] || neighbours[edge.from];\n\n      if (!neighbour) { // obsolete edge from old times;\n        continue;\n      }\n\n      // make item template\n      entries.push({\n        type: 'tmap-edgelistitem',\n        edge: edge,\n        typeWL: options.typeWL,\n        neighbour: neighbour,\n        // the children of this widget (=what is wrapped inside the\n        // widget-element's body) is used as template for the list items\n        children: this.parseTreeNode.children\n      });\n    }\n\n    if (!entries.length) {\n\n      this.wasEmpty = true;\n      entries = this.getEmptyMessage();\n\n    } else if (this.wasEmpty) {\n\n      // we need to remove the empty message\n      this.removeChildDomNodes();\n\n    }\n\n    this.makeChildWidgets(entries);\n\n  }\n\n  getEmptyMessage() {\n\n    const parser = this.wiki.parseText(\n      'text/vnd.tiddlywiki',\n      this.getAttribute('emptyMessage', ''),\n      { parseAsInline: true }\n    );\n\n    return parser ? parser.tree : [];\n\n  }\n\n  refresh(changedTiddlers) {\n\n    const changedAttributes = this.computeAttributes();\n\n    if (utils.hasElements(changedAttributes)) {\n\n      this.refreshSelf();\n\n      return true;\n    }\n\n    for (let tRef in changedTiddlers) {\n      if (!utils.isSystemOrDraft(tRef)) {\n\n        this.refreshSelf();\n\n        return true;\n      }\n    }\n\n    // let children decide for themselves\n    return this.refreshChildren(changedTiddlers);\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexports['tmap-connections'] = EdgeListWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}