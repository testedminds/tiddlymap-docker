{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["_CallbackManager","require","_ViewAbstraction","_EdgeType","_Popup","_vis","_widget","_utils","_SelectionRectangle","_environment","env","MapWidget","parseTreeNode","options","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","getAttr","getAttribute","isDebug","_utils2","default","isTrue","$tm","config","sys","debug","bindTo","callbackManager","_CallbackManager2","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","tmap:tm-create-view","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","handleDeleteElement","tmap:tm-edit-view","handleEditView","handleGenerateWidget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","visListeners","click","handleVisSingleClickEvent","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","dragEnd","handleVisDragEnd","hoverNode","handleVisHoverElement","hoverEdge","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","handleVisLoadingDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","DOMMouseScroll","contextmenu","handleContextMenu","widgetDomListeners","handleWidgetKeyup","handleWidgetKeydown","conVector","callback","_this2","eTyFilter","param","fromLabel","adapter","from","label","toLabel","selectNodeById","edge","to","view","getLabel","dialogManager","open","isConfirmed","outTObj","str","getText","type","_EdgeType2","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","raw","getEntry","ref","sysMeta","setEntry","tiddlerExists","setText","touch","x","y","n1","n2","message","args","Array","prototype","slice","arguments","unshift","logger","apply","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","utils","addClass","appendChild","graphDomNode","isPreviewed","isTiddlyWikiFakeDom","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","renderChildren","widget","setDomListeners","addLoadingBar","tooltip","_Popup2","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","getFirstElementByClassName","sidebar","contains","rebuildEditorBar","initAndRenderGraph","registry","push","reloadRefreshTriggers","checkForFreshInstall","misc","mainEditorId","url","query","toggleEnlargedMode","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","widgetQualifier","widgetTempPath","isViewBound","viewRoot","viewLabel","viewHolder","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","rasterMenuBtnClass","variables","setVariable","getTiddlerNode","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","updates","isZombieWidget","changedTiddlers","refresh","isViewSwitched","hasChangedAttributes","isViewUpdated","update","reloadBackgroundImage","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","isForce","hide","remove","refreshTriggers","parseStringArray","i","length","add","handleTriggeredRefresh","hidePopups","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","visOptions","physics","network","setOptions","stabilize","start","graph","getGraph","graphData","nodes","changedEdges","refreshDataSet","edges","nodesById","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","keys","maybeMatches","inGraph","isShowNeighbourhood","tRef","modified","nodeFilter","getNodeFilter","matches","getMatches","_this3","_destructVis","isInSidebar","getVisOptions","_vis2","DataSet","makeHashMap","setEnabled","enabled","canvas","networkDomNode","tabIndex","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","halfscreen-button","halfscreenButton","ev","_this4","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","ucFirst","role","handleConnectionEvent","openTiddlerWithId","getSelection","focus","paramObject","elements","handleRemoveElements","selectRect","selectedNodes","redraw","stopPropagation","target","mouse","offsetY","_SelectionRectangle2","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","isZoomAllowed","enlargedMode","classList","isVisSettingInSync","interaction","zoomView","_this5","nodeId","getNodeAt","offsetX","show","div","registerTransclude","contextMenuWidget","mode","render","focusButtonStateTRef","deleteByPrefix","isLiveView","clipBoard","ids","addNode","get","returnType","_this6","globalOptions","vis","localOptions","parseJSON","merge","manipulation","deleteNode","data","resetVisManipulationBar","deleteEdge","handleInsertNode","editNode","editEdge","solver","stabilization","iterations","visCallback","disableEditMode","enableEditMode","getElementsByClassName","_this7","getField","isClone","newView","isCreate","protoView","setView","_this8","count","references","toString","refFilter","joinAndWrap","_ViewAbstraction2","rename","_this9","visInherited","JSON","stringify","viewConfig","filter.prettyNodeFltr","filter.prettyEdgeFltr","getEdgeTypeFilter","vis-inherited","createdOn","getCreationDate","numberOfEdges","dialog","preselects","extend","getPropertiesByPrefix","fields","prvBg","setConfig","saveNodePositions","curBg","nf","setEdgeTypeFilter","eTf","_this10","tempImagePath","createAndSaveSnapshot","getSnapshotTitle","snapshot","width","height","defaultName","action","handleDownloadSnapshot","wiki","deleteTiddler","title","a","download","href","MouseEvent","dispatchEvent","Tiddler","text","Date","stripPreamble","toDataURL","getWithoutPrefix","_this11","isLocked","getOccurrences","viewname","openStandardConfirmDialog","destroy","defaultViewLabel","msg","trigger","getSnapshot","curTiddler","liveTab","fallbackView","_ref2","edgeIds","deleteEdges","_this12","tiddlers","params","stringifyList","delete-from","deletionCount","success","removeNode","deleteNodes","findAndRemoveClassNames","scrollTop","rootWidget","_ref3","setCentralTopic","properties","idsOfNodesWithoutPosition","pContainer","undefined","setNodesMoveable","centralGravity","fitGraph","scale","animation","getContainer","_this13","clearTimeout","activeFitTimeout","fit","easingFunction","node","_this14","isMatch","makeNode","tObj","draft.title","insertNode","_this15","tracker","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","getNodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","globalDefaults","inherited-local-default-style","inherited-group-styles","local-node-style","addToPreselects","scope","store","global","p","local","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","_ref5","typeId","handleEditEdgeType","saveNodeStyle","behaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","window","innerHeight","top","style","repaintGraph","evt","selected","button","isArray","defaultColor","colorObj","highlight","_ref7","pos","_extends","getNearestRasterPosition","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","beginPath","globalAlpha","fillStyle","fillRect","_toConsumableArray","strokeStyle","strokeRect","rPos","moveTo","lineTo","stroke","arc","Math","PI","signature","outType","inType","getTiddlerById","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","buttons","isShown","constructTooltip","populator","total","display","setAttribute","_this16","draftTRef","findDraft","tiddlerTitle","originalTRef","wasInDraftAlready","deleteTiddlers","bounds","navigateTo","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","defaultViewHolder","addTiddler","noCache","_this17","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","enable","b","isMoveable","isFixed","fixed","buttonEvents","addEventListener","setGraphButtonEnabled","tmap"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'DOMMouseScroll': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    $tm.dialogManager.open('welcome', {}, (isConfirmed, outTObj) => {\n\n      if (utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n\n        utils.setText('$:/view', 'top');\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/topstoryview');\n      }\n\n      const view = $tm.misc.defaultViewLabel;\n\n      const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n      const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n      $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this) || this.domNode.isTiddlyWikiFakeDom) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (this.isViewSwitched(changedTiddlers) // use changed view\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n      this.rebuildEditorBar();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n\n        this.rebuildEditorBar();\n        this.reloadBackgroundImage();\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n\n      if (!this.isPreventZoomOnNextUpdate) {\n\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      this.isPreventZoomOnNextUpdate = false;\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const graph = $tm.adapter.getGraph({ view: this.view });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return changedTiddlers[this.getViewHolderRef()];\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    this.networkDomNode = utils.getFirstElementByClassName('vis-network', parent, true);\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.keyCode === 46) { // delete\n      ev.preventDefault();\n      this.handleRemoveElements(this.network.getSelection());\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const isZoomAllowed = !!(\n      this.isInSidebar || // e.g. the map editor in the sidebar\n      ev.ctrlKey ||\n      this.enlargedMode ||\n      (this.clickToUse && this.networkDomNode.classList.contains('vis-active'))\n    );\n\n    const { interaction } = this.visOptions;\n    const isVisSettingInSync = isZoomAllowed === interaction.zoomView;\n\n    if (isZoomAllowed || !isVisSettingInSync) {\n      ev.preventDefault();\n    }\n\n    if (!isVisSettingInSync) {\n      // prevent visjs from reacting to this event as we first need to sync states\n      ev.stopPropagation();\n\n      interaction.zoomView = isZoomAllowed;\n      this.network.setOptions({ interaction: { zoomView: isZoomAllowed }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.hidePopups(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode || this.view.isLiveView()) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: tRef,\n      type: 'image/png',\n      text: this.getSnapshot(true),\n      modified: new Date()\n    }));\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we do not used the cashed version since we need a new object!\n    const nodeData = this.view.getNodeData(node.id, true) || {};\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n\n        this.handleOpenMapElementEvent(properties);\n\n      }\n\n\n    } else { // = clicked on an empty spot\n\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n\n    }\n\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    if (evt.button !== 2) { // not the right button\n      this.contextMenu.hide(0, true);\n    }\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (nodes.length) {\n\n      this.hidePopups(0, true);\n      this.assignActiveStyle(nodes);\n      this.setNodesMoveable(nodes, true);\n\n      if (nodes.length === 1) {\n        this.draggedNode = nodes[0];\n      }\n\n    }\n\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // WARNING: Never set this.view to the new view state at this point.\n    // e.g. via `this.view = this.getView(true)` This would produce a\n    // race condition!\n\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n      if (msg) {\n        $tm.notify(msg);\n      }\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}